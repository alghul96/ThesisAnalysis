library(scatterplot3d)
library(rgl)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_4)
image(as.matrix(datafexam_ordered), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
image(as.matrix(datafexam), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
names(datafexam)
datafexam_ordered = datafexam[order(colnames(datafexam))]
names(datafexam_ordered)
plot(WardClusters, labels = other_info$immyear)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
plot(ComplClusters, labels = other_info$immyear)
identify(ComplClusters, mostFollowed) # click over a branch to see the most followed courses!
plot(ComplClusters, labels = other_info$immyear)
plot(ComplClusters, labels = other_info$immyear)
plot(ComplClusters, labels = other_info$immyear)
ComplClusters = hclust(distances, method = "complete")
plot(ComplClusters, labels = other_info$immyear)
identify(ComplClusters, mostFollowed) # click over a branch to see the most followed courses!
mostFollowed(rownames(clusterdataf)[kgroup_4 == 2]) # Group 2
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_4)
library(scatterplot3d)
library(rgl)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_4)
pca_data$loadings[, 1:3]
pca_data$loadings[, 1:3]
names(datafexam_ordered)
View(datafexam_ordered)
write.csv(names(datafexam_ordered), "nomivar.csv")
mostFollowed(rownames(clusterdataf)[kgroup_4 == 2]) # Group 2
mostFollowed(rownames(clusterdataf)[kgroup_4 == 3]) # Group 3
mostFollowed(rownames(clusterdataf)[kgroup_4 == 4]) # Group 4
mostFollowed(rownames(clusterdataf)[kgroup_4 == 1]) # Group 1
stepFlexclust(clusterdataf, k = 3:8, nrep = 500, FUN = cclust, multicore = TRUE)
library(flexclust)
kmeansClusters_rep
plot(kmeansClusters_rep)
?help(stepFlexclust)
clusterdistances
plot(hclust(clusterdistances, method = "ward.D"))
class(laureati[1,1])
laureati <- read_excel("D:/Box Sync/#UNI/Materiale tesi/Analysis/ThesisAnalysis/laureati.xls", sheet = "recode 2") # import of the recoded dataset
library(readxl)
laureati <- read_excel("D:/Box Sync/#UNI/Materiale tesi/Analysis/ThesisAnalysis/laureati.xls", sheet = "recode 2") # import of the recoded dataset
laureati <- read_excel("D:/Box Sync/#UNI/Materiale tesi/Analysis/ThesisAnalysis/laureati.xls", sheet = "recode 2") # import of the recoded dataset
View(laureati)
datafexam = data.frame(NULL) # initializing the dataframes
for(i in 1:nrow(laureati)){
mat = laureati[i, 1]
exam = laureati[i, 3]
datafexam[mat, exam] = 1
}
175 - 104
image((as.matrix(datafexam)), col = "red")
datafexam[is.na(datafexam)] = 0
image(as.matrix(datafexam_ordered), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
image(as.matrix(datafexam), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
View(datafexam)
datafexam_ordered[, "RICERCA OPERATIVA M"]
datafexam_ordered = datafexam[order(colnames(datafexam))]
other_info = data.frame(row.names = row.names(datafexam_ordered))
other_info[,"immyear"] = datafexam_ordered[,"immyear"]
for(i in 1:nrow(carriere)){
if (!is.na(carriere$`Data laurea`[i])){ # if the student is graduated
mat = carriere[i, 1]
#cod = carriere[i, 2]
immyear = carriere[i,5]
datafexam_ordered[mat, "immyear"] = immyear
}
}
other_info[,"immyear"] = datafexam_ordered[,"immyear"]
datafexam_ordered[,-"immyear"]
datafexam_ordered[,-immyear]
View(datafexam_ordered)
names(datafexam_ordered)
datafexam_ordered[,-105]
datafexam_ordered = datafexam_ordered[,-105]
image(as.matrix(datafexam), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
image(as.matrix(datafexam_ordered), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
library(cluster)
library(stats)
clusterdataf = datafexam # select the dataframe to use for clustering
distances = daisy(clusterdataf,
type = list(asymm = c(1:ncol(clusterdataf))), # threating the variables as asymmetric binaries
metric = "gower")
ComplClusters = hclust(distances, method = "complete")
WardClusters = hclust(distances, method = "ward.D") # threating the variables as numeric
mostFollowed = function(k, percentage = 0.6){
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 0.99) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(length(k))
print(most_followed_ordered)
cat("____________________________________________________________________\n")
}
plot(ComplClusters, labels = other_info$immyear)
identify(ComplClusters, mostFollowed) # click over a branch to see the most followed courses!
mostFollowed = function(k, percentage = 0.6){
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(length(k))
print(most_followed_ordered)
cat("____________________________________________________________________\n")
}
plot(ComplClusters, labels = other_info$immyear)
identify(ComplClusters, mostFollowed) # click over a branch to see the most followed courses!
plot(WardClusters, labels = other_info$immyear)
plot(ComplClusters, labels = other_info$immyear)
plot(WardClusters, labels = other_info$immyear)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
mostFollowed = function(k, percentage = 0.7){
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(length(k))
print(most_followed_ordered)
cat("____________________________________________________________________\n")
}
mostFollowed = function(k, percentage = 0.7){
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(length(k))
print(most_followed_ordered)
cat("____________________________________________________________________\n")
}
plot(WardClusters, labels = other_info$immyear)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
mostFollowed = function(k, percentage = 0.7){
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(length(k))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
plot(WardClusters, labels = other_info$immyear)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
library(flexclust)
kmeansClusters = stepFlexclust(clusterdataf, k = 5, nrep = 1000, FUN = cclust, multicore = TRUE)
summary(kmeansClusters)
daisy(kcenters, metric = "manhattan") # distances beetween the cluster centers
kgroup_5 = clusters(kmeansClusters)
mostFollowed(rownames(clusterdataf)[kgroup_5 == 1]) # Group 1
mostFollowed(rownames(clusterdataf)[kgroup_5 == 2]) # Group 2
mostFollowed(rownames(clusterdataf)[kgroup_5 == 3]) # Group 3
mostFollowed(rownames(clusterdataf)[kgroup_5 == 4]) # Group 4
plot(WardClusters, labels = other_info$immyear)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
mostFollowed(rownames(clusterdataf)[kgroup_5 == 1]) # Group 1
kcenters$1
kcenters
kcenters$[1,]
kcenters$[1]
kcenters[1]
kcenters[1,]
mostFollowed(rownames(clusterdataf)[kgroup_5 == 1]) # Group 1
kcenters[1,]
kcenters = kmeansClusters@centers
daisy(kcenters, metric = "manhattan") # distances beetween the cluster centers
mostFollowed(rownames(clusterdataf)[kgroup_5 == 1]) # Group 1
kcenters[1,]
order(kcenters[1,])
kcenters[1,order(kcenters[1,])]
mostFollowed(rownames(clusterdataf)[kgroup_5 == 1]) # Group 1
hist(kgroup, breaks = 5)
hist(kgroup_5, breaks = 5)
kmeansClusters_rep = stepFlexclust(clusterdataf, k = 3:15, nrep = 600, FUN = cclust, multicore = FALSE)
kmeansClusters_rep = stepFlexclust(clusterdataf, k = 3:15, nrep = 600, FUN = cclust, multicore = TRUE)
kmeansClusters_rep = stepFlexclust(clusterdataf, k = 2:15, nrep = 600, FUN = cclust, multicore = TRUE)
kmeansClusters_rep
kmeansClusters_rep[[2]] # works as a list
kmeansClusters_rep[[0]] # works as a list
kmeansClusters_rep[[1]] # works as a list
kmeansClusters_rep[[2]]
kgroup_4 = kmeansClusters_rep[[3]]@cluster
kmeansClusters_rep[[3]]
plot(kmeansClusters_rep)
kmeansClusters_rep[[6]]
kmeansClusters_rep[[14]]
clusterdistances = daisy(kmeansClusters_rep[[14]]@centers, metric = "manhattan")
plot(hclust(clusterdistances, method = "ward.D"))
plot(kmeansClusters_rep)
kmeansClusters_rep[[14]]@centers
kgroup_4 = kmeansClusters_rep[[3]]@cluster
mostFollowed(rownames(clusterdataf)[kgroup_4 == 1]) # Group 1
mostFollowed(rownames(clusterdataf)[kgroup_4 == 2]) # Group 2
kmeansClusters_rep[[2]]@centers[2,] # same output
mostFollowed(rownames(clusterdataf)[kgroup_4 == 3]) # Group 3
mostFollowed(rownames(clusterdataf)[kgroup_4 == 4]) # Group 4
mostFollowed(rownames(clusterdataf)[kgroup_4 == 1]) # Group 1
mostFollowed(rownames(clusterdataf)[kgroup_4 == 2]) # Group 2
mostFollowed(rownames(clusterdataf)[kgroup_4 == 3]) # Group 3
mostFollowed(rownames(clusterdataf)[kgroup_4 == 4]) # Group 4
library(rgl)
pca_data = princomp(datafexam, cor = F)
summary(pca_data)
pca_data$loadings[, 1:3]
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_4)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_5)
?hclust
hclust
names(WardClusters)
WardClusters$dist.method
WardClusters$call
WardClusters$method
WardClusters$order
WardClusters$height
WardClusters$merge
clusterdataf[c(38,110),]
clusterdataf[c(38,110),]
distances
distances[38, 110]
dim(distances)
clusterdataf[c(38,110),]
distances["0000439075"]
distances["0000439075",]
distances
names(distances)
distances
as.data.frame(distances)
as.matrix(distances)
clusterdataf[c(38,110),]
as.matrix(distances)["0000439075"]
as.matrix(distances)["0000439075"]
as.matrix(distances)["0000439075",]
as.matrix(distances)["0000439075","0000434475"]
as.matrix(distances)["0000439075","0000626236"]
as.matrix(distances)["0000439075","0000434475"]
WardClusters$dist
names(WardClusters)
WardClusters$height
WardClusters$height[38]
WardClusters$height[110]
WardClusters$height[8]
WardClusters$order
WardClusters$merge
clusterdataf[c(129,165),]
as.matrix(distances)["0000439075","0000434475"]
as.matrix(distances)["0000365303","0000364326"]
WardClusters$merge
WardClusters$height[8]
as.matrix(distances)["0000365303","0000364326"]
clusterdataf[c(129,165),]
as.matrix(distances)["0000365303","0000364326"]
plot(WardClusters, labels = other_info$immyear)
WardClusters$height[8]
WardClusters$height
WardClusters$merge
clusterdataf[c(129,165,212),]
as.matrix(distances)["0000365303","0000366086"] # those two differs just for RETI DI TELECOMUNICAZIONI M
as.matrix(distances)["0000365303","0000364326"] # those two differs just for RETI DI TELECOMUNICAZIONI M
WardClusters$merge
WardClusters$merge[35, ]
WardClusters$merge[8]
WardClusters$merge[35, ]
WardClusters$height[35]
as.matrix(distances)["0000365303","0000364326"] # those two differs just for RETI DI TELECOMUNICAZIONI M
as.matrix(distances)["0000365303","0000364326"]
clusterdataf[c(129,165),]
apply(as.matrix(distances)["0000365303","0000364326"], 2, mean )
apply(as.matrix(distances)["0000365303","0000364326"], 2, mean)
apply(clusterdataf[c(129,165),], 2, mean)
apply(clusterdataf[c(129,165),], 2, mean) - clusterdataf[212]
apply(clusterdataf[c(129,165),], 2, mean) - clusterdataf[212,]
apply(clusterdataf[c(129,165),], 2, mean) - clusterdataf[212,]
(apply(clusterdataf[c(129,165),], 2, mean) - clusterdataf[212,])^2
sum(apply(clusterdataf[c(129,165),], 2, mean) - clusterdataf[212,])
WardClusters$height[35]
sum((apply(clusterdataf[c(129,165),], 2, mean) - clusterdataf[212,])^2)
max(as.matrix(distances)["0000365303","0000364326"])
as.matrix(distances)["0000365303","0000364326"] # those two differs just for RETI DI TELECOMUNICAZIONI M
clusterdataf[212,]
max(as.matrix(distances)["0000365303","0000364326", "0000366086"])
max(as.matrix(distances)["0000365303", "0000366086"])
WardClusters$merge[35, ]
WardClusters$height[35]
ComplClusters$merge
ComplClusters$height[8]
max(as.matrix(distances)["0000365303", "0000366086"])
ComplClusters$height[27]
max(as.matrix(distances)["0000365303", "0000366086"])
max(as.matrix(distances)["0000364326", "0000366086"])
clusterdataf[212,]) - apply(clusterdataf[c(129,165),], 2, mean) clusterdataf[212,])
clusterdataf[212,] - apply(clusterdataf[c(129,165),], 2, mean) clusterdataf[212,])
clusterdataf[212,] - apply(clusterdataf[c(129,165),], 2, mean)
(clusterdataf[212,] - apply(clusterdataf[c(129,165),], 2, mean))^2
sum((clusterdataf[212,] - apply(clusterdataf[c(129,165),], 2, mean))^2)
clusterdataf[c(129,165),]
(clusterdataf[212,] - apply(clusterdataf[c(129,165),], 2, mean))
sum((clusterdataf[212,] - apply(clusterdataf[c(129,165),], 2, mean))^2)
sum((clusterdataf[129,] - apply(clusterdataf[c(129,165),], 2, mean))^2)
sum((clusterdataf[165,] - apply(clusterdataf[c(129,165),], 2, mean))^2)
sum((clusterdataf[129,] - apply(clusterdataf[c(129,165),], 2, mean))^2)
sum((clusterdataf[222,] - apply(clusterdataf[c(129,165, 222),], 2, mean))^2)
var(clusterdataf[c(129,165, 222),])
apply(clusterdataf[c(129,165, 222),], 2, var)
apply(clusterdataf[c(129,165, 222),], 2, mean)
cbind(
apply(clusterdataf[c(129,165, 222),], 2, mean),
apply(clusterdataf[c(129,165, 222),], 2, var)
)
0.333333 * (1 - 0.333333)
0.3333333 * (1 - 0.3333333)
3*(0.3333333 * (1 - 0.3333333))
2*(0.3333333 * (1 - 0.3333333))
(0.6666667 * (1 - 0.6666667))
(1 - 0.6666667)
0.3333333 * 0.666666667
cbind(
clusterdataf[c(129,165, 222),]
apply(clusterdataf[c(129,165, 222),], 2, mean),
apply(clusterdataf[c(129,165, 222),], 2, var))
cbind(
clusterdataf[c(129,165, 222),],
apply(clusterdataf[c(129,165, 222),], 2, mean),
apply(clusterdataf[c(129,165, 222),], 2, var))
cbind(
t(clusterdataf[c(129,165, 222),]),
apply(clusterdataf[c(129,165, 222),], 2, mean),
apply(clusterdataf[c(129,165, 222),], 2, var))
cbind(
t(clusterdataf[c(129,165, 222),]),
apply(clusterdataf[c(129,165, 222),], 2, mean),
apply(clusterdataf[c(129,165, 222),], 2, var))
cbind(
t(clusterdataf[c(129,165, 222),]),
apply(clusterdataf[c(129,165, 222),], 2, mean),
apply(clusterdataf[c(129,165, 222),], 2, var))
sum(apply(clusterdataf[c(129,165, 222),], 2, var))
sum(apply(clusterdataf[c(129,165),], 2, var))
WardClusters$height[35]
WardClusters$merge[35, ]
var(clusterdataf(212))
WardClusters$height[35]
as.matrix(distances)["0000365303","0000364326"] # those two differs just for RETI DI TELECOMUNICAZIONI M
cbind(
t(clusterdataf[c(129,165, 222),]),
apply(clusterdataf[c(129,165, 212),], 2, mean),
apply(clusterdataf[c(129,165, 212),], 2, var))
apply(clusterdataf[c(129,165, 212),], 2, var)
sum(apply(clusterdataf[c(129,165, 222),], 2, var))
sum(apply(clusterdataf[c(129,165, 212),], 2, var))
dist(0000366086, apply(clusterdataf[c(129,165, 212),], 2, mean))
dist(clusterdataf["0000366086"], apply(clusterdataf[c(129,165, 212),], 2, mean))
clusterdataf["0000366086"]
dist(clusterdataf["0000366086",], apply(clusterdataf[c(129,165, 212),], 2, mean))
clusterdataf["0000366086",]
apply(clusterdataf[c(129,165, 212),], 2, mean)
dist(clusterdataf["0000366086",], apply(clusterdataf[c(129,165),], 2, mean))
dist(211, 1221)
distances(211, 1221)
library(cluster)
library(stats)
daisy(clusterdataf["0000366086",], apply(clusterdataf[c(129,165),], 2, mean))
daisy(cbind(clusterdataf["0000366086",], apply(clusterdataf[c(129,165),], 2, mean)))
dist(cbind(clusterdataf["0000366086",], apply(clusterdataf[c(129,165),], 2, mean)))
cbind(
t(clusterdataf[c(129,165, 222),]),
apply(clusterdataf[c(129,165, 212),], 2, mean),
apply(clusterdataf[c(129,165, 212),], 2, var))
WardClusters = hclust(clusterdataf, method = "ward.D") # threating the variables as numeric
hclust
?hclust
WardClusters = hclust(ComplClusters, method = "ward.D") # threating the variables as numeric
WardClusters = hclust(distances, method = "ward.D2") # threating the variables as numeric
clusterdataf = datafexam # select the dataframe to use for clustering
WardClusters = hclust(distances, method = "ward.D2") # threating the variables as numeric
ComplClusters = hclust(distances, method = "complete")
distances = daisy(clusterdataf,
type = list(asymm = c(1:ncol(clusterdataf))), # threating the variables as asymmetric binaries
metric = "gower")
ComplClusters = hclust(distances, method = "complete")
WardClusters = hclust(distances, method = "ward.D2") # threating the variables as numeric
plot(WardClusters, labels = other_info$immyear)
plot(ComplClusters, labels = other_info$immyear)
plot(WardClusters, labels = other_info$immyear)
plot(ComplClusters, labels = other_info$immyear)
plot(WardClusters, labels = other_info$immyear)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
plot(WardClusters, labels = other_info$immyear)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
plot(ComplClusters, labels = other_info$immyear)
identify(ComplClusters, mostFollowed) # click over a branch to see the most followed courses!
ComplClusters = hclust(distances, method = "average")
plot(ComplClusters, labels = other_info$immyear)
ComplClusters = hclust(distances, method = "single")
plot(ComplClusters, labels = other_info$immyear)
ComplClusters = hclust(distances, method = "complete")
WardClusters = hclust(distances, method = "ward.D") # threating the variables as numeric
plot(WardClusters, labels = other_info$immyear)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
ComplClusters = hclust(distances, method = "centroid")
ComplClusters = hclust(distances, method = "centroid")
plot(ComplClusters, labels = other_info$immyear)
ComplClusters = hclust(distances, method = "complete")
plot(ComplClusters, labels = other_info$immyear)
?hclust
WardClusters = agnes(clusterdataf)
plot(WardClusters, labels = other_info$immyear)
plot(WardClusters, labels = other_info$immyear)
WardClusters = agnes(clusterdataf, metric = "manhattan", method = "Ward")
WardClusters = agnes(clusterdataf, metric = "manhattan", method = "ward")
plot(WardClusters, labels = other_info$immyear)
WardClusters = agnes(distances, diss = TRUE, method = "ward")
plot(WardClusters, labels = other_info$immyear)
which.max(distances)
max(distances)
?daisy
ComplClusters = hclust(distances, method = "median")
plot(ComplClusters, labels = other_info$immyear)
ComplClusters = hclust(distances, method = "complete")
plot(ComplClusters, labels = other_info$immyear)
hist(cutree(ComplClusters, h = .83))
?stepflexclust
library(flexclust)
?stepflexclust
?stepcclust
?PAM
kmeansClusters = stepFlexclust(clusterdataf, k = 5, nrep = 1000, FUN = pam, multicore = TRUE)
library(cluster)
?pam
kmeansClusters = stepFlexclust(clusterdataf, k = 5, nrep = 1000, FUN = pam, multicore = TRUE)
kmeansClusters = stepFlexclust(clusterdataf, k = 5, nrep = 1000, FUN = cclust, multicore = TRUE)
distances = daisy(clusterdataf, type = list(asymm = c(1:ncol(clusterdataf))), metric = "gower")
as.factor(clusterdataf)
clusterdataf == 1
clusterdataf == 1 || clusterdataf == 0
clusterdataf == 1 | clusterdataf == 0
clusterdataf == 1 | clusterdataf == 0
(clusterdataf == 1 | clusterdataf == 0) == FALSE
image(as.matrix(datafexam_ordered), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
image(as.matrix(datafexam), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
image(as.matrix(datafexam_ordered), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
datafexam_ordered[(datafexam_ordered == 1 | datafexam_ordered == 0) == FALSE]
datafexam_ordered[(datafexam_ordered == 1 | datafexam_ordered == 0) == TRUE]
datafexam_ordered[(datafexam_ordered == 1 | datafexam_ordered == 0) == FALSE]
clusterdataf <- lapply(clusterdataf, as.factor)
str(clusterdataf)
distances = daisy(clusterdataf, type = list(asymm = c(1:ncol(clusterdataf))), metric = "gower")
as.data.frame(clusterdataf)
clusterdataf = datafexam # select the dataframe to use for clustering
clusterdataf <- apply(clusterdataf, 2, as.factor)
str(clusterdataf)
distances = daisy(clusterdataf, type = list(asymm = c(1:ncol(clusterdataf))), metric = "gower")
clusterdataf <- apply(clusterdataf, 1, as.factor)
clusterdataf = datafexam # select the dataframe to use for clustering
clusterdataf <- apply(clusterdataf, 1, as.factor)
clusterdataf
clusterdataf = datafexam # select the dataframe to use for clustering
factor(clusterdataf)
factor(clusterdataf[, 1])
apply(clusterdataf, 2, factor)
str(apply(clusterdataf, 2, factor))
distances = daisy(apply(clusterdataf, 2, factor)
, type = list(asymm = c(1:ncol(clusterdataf))), metric = "gower")
distances = daisy(clusterdataf, type = list(asymm = c(1:ncol(clusterdataf))), metric = "gower")
kmedoidsClusters = pam(distances, k = 4, diss = TRUE)
kmedoidsClusters
kmedoidsClusters$clusinfo
kmedoidsClusters = pam(distances, k = 4, diss = TRUE)
kmedoidsClusters$clusinfo
kmedoidsClusters = stepFlexclust(distances, k = 4, diss = TRUE, nrep = 1000, FUN = pam, multicore = TRUE)
kmedoidsClusters = stepFlexclust(distances, nrep = 1000, FUN = pam(k = 4, diss = TRUE), multicore = TRUE)
kmedoidsClusters = stepFlexclust(nrep = 1000, FUN = pam(distances, k = 4, diss = TRUE), multicore = TRUE)
kmedoidsClusters = stepFlexclust(k = 4, nrep = 1000, FUN = pam(distances, k = 4, diss = TRUE), multicore = TRUE)
pc = pamk(g.dist, krange=1:5, criterion="asw")
pc = pamk(g.dist, krange=1:5, criterion="asw")
library(fpc)
pc = pamk(g.dist, krange=1:5, criterion="asw")
?foc
?`fpc-package`
pc = pamk(distances, krange=1:14, criterion="asw")
pc
pc$clusinfo
pc$pamobject$clusinfo
kmedoidsClusters = stepFlexclust(x = distances, k = 4, nrep = 1000, FUN = pam, multicore = TRUE)
regmix(indep = clusterdataf, ir = 100, nclust = 1:8)
regmix(indep = clusterdataf, ir = 100, nclust = 1:8, dep = 1)
cluster.stats(distances,kmedoidsClusters$cluster)
pc$pamobject$cluster
cluster.stats(distances,pc$pamobject$cluster)
cluster.stats(distances,kmedoidsClusters$clusters)
kmedoidsClusters$clusters
cluster.stats(distances, kmedoidsClusters$cluster)
pc$pamobject$cluster
kmedoidsClusters = pam(distances, k = 4, diss = TRUE)
?pamk
pc = pamk(distances, krange=1:14, criterion="asw", diss = TRUE)
summary(pc)
pc
pc$pamobject$medoids
distances = daisy(clusterdataf, type = list(asymm = c(1:ncol(clusterdataf))), metric = "gower")
distances
distances = daisy(clusterdataf,
#type = list(asymm = c(1:ncol(clusterdataf))),
metric = "gower")
pc = pamk(distances, krange=1:14, criterion="asw", diss = TRUE)
pc
distances = daisy(clusterdataf,
type = list(asymm = c(1:ncol(clusterdataf))),
metric = "gower")
