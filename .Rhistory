image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
text(x = 0, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[kmedoidsClusters$medoids,]), axes = FALSE, main = "K-medoids Medoids")
text(x = 0, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
par(mfrow = c(3,1))
image(round(t(kcenters)), axes = FALSE, main = "K-means Centroids")
text(x = 1 y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
text(x = 1, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[kmedoidsClusters$medoids,]), axes = FALSE, main = "K-medoids Medoids")
text(x = 1, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(round(t(kcenters)), axes = FALSE, main = "K-means Centroids")
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[kmedoidsClusters$medoids,]), axes = FALSE, main = "K-medoids Medoids")
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0", grid = TRUE)
image(round(t(kcenters)), axes = FALSE, main = "K-means Centroids", grid = TRUE)
line(0)
image(round(t(kcenters)), axes = FALSE, main = "K-means Centroids")
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
line(1)
line(.3)
abline(.3)
?abline
abline(h = .3)
abline(h = .3333)
abline(h = .27)
abline(h = .26)
abline(h = .25)
abline(h = c(.25, .75))
abline(h = c(.25, .75), col = 1)
abline(h = c(.25, .75), col = 0)
image(round(t(kcenters)), axes = FALSE, main = "K-means Centroids", abline(h = c(.25, .75), col = 0))
par(mfrow = c(3,1))
image(round(t(kcenters)), axes = FALSE, main = "K-means Centroids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[kmedoidsClusters$medoids,]), axes = FALSE, main = "K-medoids Medoids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(round(t(kcenters)), axes = FALSE, main = "K-means Centroids", xlab = "Exams")
image(round(t(kcenters)), axes = FALSE, main = "K-means Centroids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
cluster.stats(distances, kmeansClusters$cluster)
library(fpc)
cluster.stats(distances, kmeansClusters$cluster)
cluster.stats(distances, kmedoidsClusters$cluster)
kmeansClusters$cluster
cluster.stats(distances, kmeansClusters@cluster)
cluster.stats(distances, kmedoidsClusters$cluster)$avg.silwidth
cluster.stats(distances, kmeansClusters@cluster)$avg.silwidth
plot(cluster.stats(distances, kmedoidsClusters$cluster))
??fpc
cluster.stats(clustering = mixtgroup_3)
cluster.stats(clustering = mixtprototypes)
kmeansClusters@cluster
cluster.stats(clustering = results[4])
results[4]
cluster.stats(clustering = as.vector(results[4]))
cluster.stats(distances, results[[1]])$avg.silwidth
results[[1]]
for(i in results){
cluster.stats(distances, results[[1]])$avg.silwidth
}
print(cluster.stats(distances, results[[1]])$avg.silwidth)
for(i in results){
print(cluster.stats(distances, results[[1]])$avg.silwidth)
}
for(i in results){
print(cluster.stats(distances, results[[i]])$avg.silwidth)
}
for(i in results){
print(cluster.stats(distances, i)$avg.silwidth)
}
for(i in results){
print(cluster.stats(distances, i))
}
for(i in results){
print("_________________________")
print(cluster.stats(distances, i))
}
library(cluster)
silhouette(x = results[[1]])
silhouette(distances, x = results[[1]])
plot(silhouette(distances, x = results[[1]]))
plot(summary(silhouette(distances, x = results[[1]])))
silhouette(results[[1]], distances)
plot(silhouette(results[[1]], distances))
plot(silhouette(results[[2]], distances))
plot(silhouette(results[[3]], distances))
plot(silhouette(results[[4]], distances))
plot(silhouette(results[[4]], distances), cex.names=0.6,nmax=98,main="Silhouette Plot for 'Sparrows'
+ dataset, k=2")
plot(silhouette(results[[4]], distances), cex.names=0.6)
distances = daisy(clusterdataf,
type = list(asymm = c(1:ncol(clusterdataf))), # threating the variables as asymmetric binaries
metric = "gower")
for(i in results){
print("_________________________")
print(cluster.stats(distances, i))
plot(silhouette(i, distances), cex.names=0.6)
}
kmeansClusters_rep = stepFlexclust(clusterdataf, k = 2:4, nrep = 600, FUN = cclust, multicore = TRUE)
library(flexclust)
kmeansClusters_rep = stepFlexclust(clusterdataf, k = 2:4, nrep = 600, FUN = cclust, multicore = TRUE)
for(i in kmeansClusters_rep){
print(cluster.stats(distances, i))
plot(silhouette(i, distances), cex.names=0.6)
}
kmeansClusters_rep
for(i in kmeansClusters_rep) print i
for(i in kmeansClusters_rep) print(i)
for(i in kmeansClusters_rep@models){
print(cluster.stats(distances, i))
plot(silhouette(i, distances), cex.names=0.6)
}
for(i in kmeansClusters_rep@models) print(i)
for(i in kmeansClusters_rep@models$`2`){
print(cluster.stats(distances, i))
plot(silhouette(i, distances), cex.names=0.6)
}
for(i in kmeansClusters_rep@1){
print(cluster.stats(distances, i))
plot(silhouette(i, distances), cex.names=0.6)
}
kmeansClusters_rep@1
kmeansClusters_rep[[1]]
for(i in kmeansClusters_rep[[1]]){
print(cluster.stats(distances, i))
plot(silhouette(i, distances), cex.names=0.6)
}
kmeansClusters_rep[[i]]$cluster
kmeansClusters_rep[[i]]$clusters
kmeansClusters_rep[[1]]$clusters
kmeansClusters_rep[[1]]$cluster
kmeansClusters_rep[[1]]
kmeansClusters_rep[[1]]@cluster
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep[[i]]@cluster))
plot(silhouette(kmeansClusters_rep[[i]]@cluster), distances), cex.names=0.6)
}
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep[[i]]@cluster))
#  plot(silhouette(kmeansClusters_rep[[i]]@cluster), distances), cex.names=0.6)
}
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep[[i]]@cluster))
plot(silhouette(kmeansClusters_rep[[i]]@cluster), distances)), cex.names=0.6)
}
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep[[i]]@cluster))
plot((silhouette(kmeansClusters_rep[[i]]@cluster), distances), cex.names=0.6)
}
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep[[i]]@cluster))
plot((silhouette(kmeansClusters_rep[[i]]@cluster, distances), cex.names=0.6)
}
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep[[i]]@cluster))
plot(silhouette(1, distances), cex.names=0.6)
}
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep[[i]]@cluster))
plot(silhouette(kmeansClusters_rep[[i]]@cluster, distances), cex.names=0.6)
}
par(mfrow = c(1,3))
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep[[i]]@cluster))
plot(silhouette(kmeansClusters_rep[[i]]@cluster, distances), cex.names=0.6)
}
plot(kmeansClusters_rep)
kmeansClusters_rep = stepFlexclust(clusterdataf, k = 2:8, nrep = 600, FUN = cclust, multicore = TRUE)
plot(kmeansClusters_rep) # from the within sum of squares, we see that 3 clusters in the
plot(kmeansClusters_rep) # from the within sum of squares, we see that 3 clusters in the
library(fpc)
?clusterboot
rm(distances_matr)
clusterboot(distances, distances = TRUE)
clusterboot(clusterdataf, clustermethod = "kmeansCBI")
clusterboot(clusterdataf, clustermethod = "kmeans")
clusterboot(clusterdataf, clustermethod = "kmeans")
clusterboot(clusterdataf)
clusterboot(clusterdataf, clustermethod = kmeans)
clusterboot(clusterdataf, clustermethod = kmeans, centers = 3)
clusterboot(clusterdataf, clustermethod = kmeans(), centers = 3)
clusterboot(clusterdataf, clustermethod = kmeans(clusterdataf, 3))
clusterboot(clusterdataf, clustermethod = kmeans)
clusterboot(clusterdataf, clustermethod = kmeansCBI)
clusterboot(clusterdataf, clustermethod = kmeansCBI, krange = 3)
aaa = clusterboot(clusterdataf, clustermethod = kmeansCBI, krange = 3)
summary(aaa)
aaa$result
aaa$partition
aaa$bootresult
plot(aaa)
aaa$B
pvrect(s, max.only=FALSE)
for(i in results){
print("_________________________")
print(cluster.stats(distances, i))
plot(silhouette(i, distances), cex.names=0.6)
}
aaa = clusterboot(clusterdataf, clustermethod = kmeansCBI, krange = 3)
plot(aaa)
plot(clusterboot(clusterdataf, clustermethod = kmeansCBI, krange = 3))
plot(clusterboot(clusterdataf, clustermethod = kmeansCBI, krange = 3))
rm(aaa)
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
library(spatstat)
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
abline(v = 0.3)
abline(v = 0.6)
abline(v = 0.1)
abline(v = 0.25)
abline(v = 30)
abline(v = 33)
abline(v = 31)
abline(v = c(31,61))
abline(v = c(31,61), col = "white")
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
abline(v = c(31,61), col = "white")
abline(v = c(30, 60), col = "white")
abline(v = c(30.5, 60.5), col = "white")
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
abline(v = c(30.5, 60.5), col = "white")
abline(v = c(30.5, 60.5), col = "white", lwd = 2)
names(clusterdataf)
rownames(clusterdataf)
mostFollowed_byclust(rep(1, 322))
mostFollowed_byclust(rep(1, 322))
mostFollowed_byclust(rep(1, 322)) < 0.5
mostFollowed_byclust(rep(1, 322)) < 0.3
datafexam[, mostFollowed_byclust(rep(1, 322)) < 0.3]
dim(datafexam[, mostFollowed_byclust(rep(1, 322)) < 0.3])
dim(datafexam[, mostFollowed_byclust(rep(1, 322)) > 0.3])
clusterdataf = datafexam[, mostFollowed_byclust(rep(1, 322)) > 0.3]
kmeansClusters_rep_reduced = stepFlexclust(clusterdataf, k = 2:8, nrep = 600, FUN = cclust, multicore = TRUE)
library(flexclust)
kmeansClusters_rep_reduced = stepFlexclust(clusterdataf, k = 2:8, nrep = 600, FUN = cclust, multicore = TRUE)
plot(kmeansClusters_rep_reduced) # from the within sum of squares, we see that it become stable after 2/3 clusters
par(mfrow = c(1,3))
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep_reduced[[i]]@cluster))
plot(silhouette(kmeansClusters_rep_reduced[[i]]@cluster, distances), cex.names=0.6)
}
library(cluster)
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep_reduced[[i]]@cluster))
plot(silhouette(kmeansClusters_rep_reduced[[i]]@cluster, distances), cex.names=0.6)
}
par(mfrow = c(1,3))
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep_reduced[[i]]@cluster))
plot(silhouette(kmeansClusters_rep_reduced[[i]]@cluster, distances), cex.names=0.6)
}
library(fcp)
library(fpc)
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep_reduced[[i]]@cluster))
plot(silhouette(kmeansClusters_rep_reduced[[i]]@cluster, distances), cex.names=0.6)
}
mostFollowed_byclust(rep(1, 322)) > 0.3
mostFollowed_byclust(rep(1, 322)) > 0.3 ||  mostFollowed_byclust(rep(1, 322)) < 1
mostFollowed_byclust(rep(1, 322)) > 0.3 ||  mostFollowed_byclust(rep(1, 322)) < .99
mostFollowed_byclust(rep(1, 322)) > 0.3
mostFollowed_byclust(rep(1, 322)) < .99
mostFollowed_byclust(rep(1, 322)) < 1
mostFollowed_byclust(rep(1, 322)) > 0.3 & mostFollowed_byclust(rep(1, 322)) < 1
clusterdataf = datafexam[, mostFollowed_byclust(rep(1, 322)) > 0.3 & mostFollowed_byclust(rep(1, 322)) < 1]
clusterdataf
clusterdataf = datafexam[, mostFollowed_byclust(rep(1, 322)) > 0.3 & mostFollowed_byclust(rep(1, 322)) < 1]
clusterdataf
dim(clusterdataf)
kmeansClusters_rep_reduced = stepFlexclust(clusterdataf, k = 2:10, nrep = 800, FUN = cclust, multicore = TRUE)
library(flexclust)
library(fpc)
library(cluster)
mostFollowed_byclust(rep(1, 322))
names(clusterdataf)
mostFollowed_byclust(rep(1, 322)) > 0.3 & mostFollowed_byclust(rep(1, 322)) < 1
kmeansClusters_rep_reduced = stepFlexclust(clusterdataf, k = 2:10, nrep = 800, FUN = cclust, multicore = TRUE)
plot(kmeansClusters_rep_reduced) # from the within sum of squares, we see that it become stable after 2/3 clusters
plot(kmeansClusters_rep_reduced) # from the within sum of squares, we see that it become stable after 2/3 clusters
par(mfrow = c(1,3))
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep_reduced[[i]]@cluster))
plot(silhouette(kmeansClusters_rep_reduced[[i]]@cluster, distances), cex.names=0.6)
}
clusterdataf = datafexam # select the dataframe to use for clustering
temp = clusterboot(clusterdataf, clustermethod = kmeansCBI, krange = 3)
temp$result
temp$result$partition
temp = temp$result$partition
mostFollowed_byclust(temp)
mostFollowed_byclust(temp, .7)
mostFollowed_byclust(temp, .5)
plot(temp)
temp = clusterboot(clusterdataf, clustermethod = kmeansCBI, krange = 3)
plot(temp)
temp = temp$result$partition
mostFollowed_byclust(temp, .5)
plot(silhouette(temp, distances))
rm(temp)
install.packages("hybridHclust")
clusterdataf = datafexam # select the dataframe to use for clustering
distances = daisy(clusterdataf,
type = list(asymm = c(1:ncol(clusterdataf))), # threating the variables as asymmetric binaries
metric = "gower")
library(cluster)
distances = daisy(clusterdataf,
type = list(asymm = c(1:ncol(clusterdataf))), # threating the variables as asymmetric binaries
metric = "gower")
?hybridclust
?hybridHclust
library(hybridHclust)
?hybridHclust
HybridClusters = hybridHclust(clusterdataf)
plot(HybridClusters)
identify(HybridClusters, mostFollowed) # click over a branch to see the most followed courses!
plot(WardClusters, labels = other_info$immyear, which.plot = 2)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
plot(HybridClusters)
identify(HybridClusters, mostFollowed) # click over a branch to see the most followed courses!
table(hgroup_3)
hygroup_3 = cutree(HybridClusters, k = 3)
table(hgroup_3, hygroup_3)
hgroup_3
hygroup_3
table(hgroup_3, hygroup_3)
table(hgroup_3, kgroup_3)
table(hgroup_3, mixtgroup_3)
table(hgroup_3, other_info[,3])
table(hgroup_3, hygroup_3)
FrequencyPlot
itemFrequencyplot
itemFrequencyPlot(data, support=0.1)
library(hplot)
install.packages("aRules")
install.packages("arules")
?arules
??arules
library(arules)
itemFrequencyPlot(clusterdataf)
itemFrequencyPlot(as.matrix(clusterdataf))
itemFrequencyPlot(kgroup_3)
itemFrequencyPlot(data)
?itemFrequencyPlot
arules::apriori(clusterdataf)
as.factor(clusterdataf)
names(clusterdataf)
print(names)
for(i in names(clusterdataf)){
print(i)
#clusterdataf_factor[, i] = factor(clusterdataf[,i])
}
for(i in names(clusterdataf)){
print(i)
clusterdataf_factor[, i] = factor(clusterdataf[,i])
}
clusterdataf_factor = NULL
for(i in names(clusterdataf)){
print(i)
clusterdataf_factor[, i] = factor(clusterdataf[,i])
}
clusterdataf_factor = data.fram(NULL)
clusterdataf_factor = data.frame(NULL)
for(i in names(clusterdataf)){
print(i)
clusterdataf_factor[, i] = factor(clusterdataf[,i])
}
clusterdataf_factor = data.frame(row.names = colnames(clusterdataf))
for(i in names(clusterdataf)){
print(i)
clusterdataf_factor[, i] = factor(clusterdataf[,i])
}
factor(clusterdataf[,1])
for(i in names(clusterdataf)){
print(i)
clusterdataf_factor[, i] = factor(clusterdataf[,1])
}
for(i in names(clusterdataf)){
print(i)
clusterdataf_factor = factor(clusterdataf[,1])
}
for(i in names(clusterdataf)){
print(i)
clusterdataf_factor[, i]
}
clusterdataf_factor = data.frame(row.names = colnames(clusterdataf))
for(i in names(clusterdataf)){
print(i)
clusterdataf_factor[, i]
}
clusterdataf_factor = data.frame(row.names = rownames(clusterdataf))
clusterdataf_factor = data.frame(row.names = rownames(clusterdataf))
for(i in names(clusterdataf)){
print(i)
clusterdataf_factor[, i] = factor(clusterdataf[ ,i])
}
str(clusterdataf)
str(clusterdataf_factor)
as.factor.dataframe = function(x){
output_dataframe = data.frame(row.names = rownames(x))
for(i in names(clusterdataf)){
output_dataframe[, i] = factor(x[ ,i])
}
return(output_dataframe)
}
as.factor.dataframe(clusterdataf)
str(as.factor.dataframe(clusterdataf))
clusterdataf_factor = as.factor.dataframe(clusterdataf) # making the dataframe as factor
str(clusterdataf_factor)
arules::apriori(clusterdataf_factor)
apriori_rules = apriori(clusterdataf_factor, parameter= list(supp=0.05, conf=0.3))
library(arules)
clusterdataf_factor
apriori_rules = apriori(clusterdataf_factor, parameter= list(supp=0.05, conf=0.3))
clusterdataf = datafexam[, mostFollowed_byclust(rep(1, 322)) > 0.3 & mostFollowed_byclust(rep(1, 322)) < 1]
clusterdataf_factor = as.factor.dataframe(clusterdataf) # making the dataframe as factor
apriori_rules = apriori(clusterdataf_factor, parameter= list(supp=0.05, conf=0.3))
summary(apriori_rules)
plot(apriori_rules)
library(arulesViz)
install.packages("arulesViz")
library(arulesViz)
plot(apriori_rules)
clusterdataf = datafexam # select the dataframe to use for clustering
clusterdataf_factor = as.factor.dataframe(clusterdataf) # making the dataframe as factor
write.csv(clusterdataf_factor, "dataframe.csv")
temp = clusterboot(clusterdataf, clustermethod = kmeansCBI, krange = 3)
library(fpc)
courses_mixtgroup
courses_mixtgroup = mostFollowed_byclust(other_info[,3], percentage = 0.7) # exam frequentation in mixture-model clusters
library(cluster)
library(stats)
library(hybridHclust)
plot(WardClusters, labels = other_info$immyear, which.plot = 2)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
comparison = cbind(courses_mixtgroup[2:3], courses_kmeagroup[2:1], courses_hgroup[1:2], courses_kmedgroup[1:2])
comparison = cbind(courses_mixtgroup[2:3], courses_kmeagroup[2:1], courses_hgroup[1:2], courses_kmedgroup[1:2])
round(comparison, 2) # comparing the two major clusters
round(comparison, 2) # comparing the two major clusters
par(mfrow = c(3,1))
image(round(t(kcenters)), axes = FALSE, main = "K-means Centroids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[kmedoidsClusters$medoids,]), axes = FALSE, main = "K-medoids Medoids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
for(i in results){
print("_________________________")
print(cluster.stats(distances, i))
plot(silhouette(i, distances), cex.names=0.6)
}
par(mfrow = c(2,2))
for(i in results){
hist(i, main = "")
}
comparison = cbind(courses_mixtgroup[2:3], courses_kmeagroup[2:1], courses_hgroup[1:2], courses_kmedgroup[1:2])
plot(silhouette(temp, distances))
temp = clusterboot(clusterdataf, clustermethod = kmeansCBI, krange = 3)
plot(temp)
temp = temp$result$partition
mostFollowed_byclust(temp, .5)
plot(silhouette(temp, distances))
rm(temp)
temp = clusterboot(clusterdataf, clustermethod = kmeansCBI, krange = 3)
plot(temp)
temp = temp$result$partition
par(mfrow = c(1,3))
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep[[i]]@cluster))
plot(silhouette(kmeansClusters_rep[[i]]@cluster, distances), cex.names=0.6)
}
library(spatstat)
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
ls
ls()
library("arulesViz", lib.loc="~/R/win-library/3.3")
library("arules", lib.loc="~/R/win-library/3.3")
detach("package:arules", unload=TRUE)
detach("package:arulesViz", unload=TRUE)
remove.packages("arules", lib="~/R/win-library/3.3")
remove.packages("arulesViz", lib="~/R/win-library/3.3")
