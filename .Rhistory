if("k-means" %in% technique){
cat("\nPerforming k-means clustering. It might take a while depending on number of simulations...\n")
kmeans_result = stepFlexclust(binarydataf, k = nclust, nrep = nsim, FUN = cclust, multicore = TRUE)
results["kmeans"] = kmeans_result
}
# K-medoids
if("k-medoids" %in% technique){
cat("\nPerforming k-medoids clustering...\n")
kmedoids_result = pamk(distances, krange = nclust, criterion = "asw", diss = TRUE)
results["kmedoids"] = kmedoids_result
}
# Ward method
if("ward" %in% technique){
cat("\nPerforming Ward hierarchical clustering...\n")
ward_result = hclust(distances, method = "ward.D")
print(class(ward_result))
results["ward"] = list(ward_result)
}
# Hybrid hierarchial method
if("hybrid" %in% technique){
cat("\nPerforming Hybrid hierarchical clustering...\n")
hybrid_result = hybridHclust(binarydataf)
results["hybrid"] = list(hybrid_result)
}
# probability based clustering
if("prob" %in% technique){
library(PythonInR)
cat("\nPerforming Bayes Bernoulli Mixture Model clustering. It might take a while depending on number of simulations...\n")
setwd("Python")
pyConnect()
pyExec("import pandas")
cat("\tTransferring variables to Python...\n")
pySet("data", value = binarydataf, usePandas = TRUE)
pySet("nclusters", value = nclust, usePandas = TRUE)
pySet("nsimulations", value = nsim, usePandas = TRUE)
cat("\tExecuting the script...")
pyExecfile("simpleModelbased.py") # running
mixtgroup = pyGet("modelclust", simplify = FALSE) + 1
mixtprob = pyGet("clustprob", simplify = TRUE)
mixtprototypes = pyGet("prototype", simplify = TRUE)
pyExit()
mixture_result = list(mixtgroup, mixtprob, mixtprototypes)
results["mixture"] = list(mixture_result)
}
#cluster.stats(distances, kmeans_result[[i]]@cluster)$avg
cat("\n")
return(results)
}
results = studyplan_finder(clusterdataf, technique = list("prob"), nclust = 2, nsim = 20)
results
results$mixture
studyplan_finder = function(binarydataf, technique, nclust, nsim = 1, return_class = TRUE){
library(flexclust)
library(cluster)
library(fpc)
library(hybridHclust)
if(class(binarydataf) != "data.frame") warning("Input should be a binary data frame.")
if(class(technique) != "list") stop("Should provide a list of valid clustering techniques. Please input a list of techniques.")
if(length(nclust) == 1) if(nclust == 0) stop("At least one cluster is needed to perform analysis.")
results = list()
cat("\nComputing distance matrix for binary variables...\n")
distances = daisy(binarydataf,
type = list(asymm = c(1:ncol(binarydataf))), # threating the variables as asymmetric binaries
metric = "gower")
# K - means
if("k-means" %in% technique){
cat("\nPerforming k-means clustering. It might take a while depending on number of simulations...\n")
kmeans_result = stepFlexclust(binarydataf, k = nclust, nrep = nsim, FUN = cclust, multicore = TRUE)
results["kmeans"] = kmeans_result
}
# K-medoids
if("k-medoids" %in% technique){
cat("\nPerforming k-medoids clustering...\n")
kmedoids_result = pamk(distances, krange = nclust, criterion = "asw", diss = TRUE)
results["kmedoids"] = kmedoids_result
}
# Ward method
if("ward" %in% technique){
cat("\nPerforming Ward hierarchical clustering...\n")
ward_result = hclust(distances, method = "ward.D")
print(class(ward_result))
results["ward"] = list(ward_result)
}
# Hybrid hierarchial method
if("hybrid" %in% technique){
cat("\nPerforming Hybrid hierarchical clustering...\n")
hybrid_result = hybridHclust(binarydataf)
results["hybrid"] = list(hybrid_result)
}
# probability based clustering
if("prob" %in% technique){
library(PythonInR)
cat("\nPerforming Bayes Bernoulli Mixture Model clustering. It might take a while depending on number of simulations...\n")
setwd("Python")
pyConnect()
pyExec("import pandas")
cat("\tTransferring variables to Python...\n")
pySet("data", value = binarydataf, usePandas = TRUE)
pySet("nclusters", value = nclust, usePandas = TRUE)
pySet("nsimulations", value = nsim, usePandas = TRUE)
cat("\tExecuting the script...")
pyExecfile("simpleModelbased.py") # running
mixture_result = list()
mixture_result["mixtgroup"] = pyGet("modelclust", simplify = FALSE) + 1
mixture_result["mixtprob"] = pyGet("clustprob", simplify = TRUE)
mixture_result["mixtprototypes"] = pyGet("prototype", simplify = TRUE)
pyExit()
results["mixture"] = list(mixture_result)
}
#cluster.stats(distances, kmeans_result[[i]]@cluster)$avg
cat("\n")
return(results)
}
studyplan_finder = function(binarydataf, technique, nclust, nsim = 1, return_class = TRUE){
library(flexclust)
library(cluster)
library(fpc)
library(hybridHclust)
if(class(binarydataf) != "data.frame") warning("Input should be a binary data frame.")
if(class(technique) != "list") stop("Should provide a list of valid clustering techniques. Please input a list of techniques.")
if(length(nclust) == 1) if(nclust == 0) stop("At least one cluster is needed to perform analysis.")
results = list()
cat("\nComputing distance matrix for binary variables...\n")
distances = daisy(binarydataf,
type = list(asymm = c(1:ncol(binarydataf))), # threating the variables as asymmetric binaries
metric = "gower")
# K - means
if("k-means" %in% technique){
cat("\nPerforming k-means clustering. It might take a while depending on number of simulations...\n")
kmeans_result = stepFlexclust(binarydataf, k = nclust, nrep = nsim, FUN = cclust, multicore = TRUE)
results["kmeans"] = kmeans_result
}
# K-medoids
if("k-medoids" %in% technique){
cat("\nPerforming k-medoids clustering...\n")
kmedoids_result = pamk(distances, krange = nclust, criterion = "asw", diss = TRUE)
results["kmedoids"] = kmedoids_result
}
# Ward method
if("ward" %in% technique){
cat("\nPerforming Ward hierarchical clustering...\n")
ward_result = hclust(distances, method = "ward.D")
print(class(ward_result))
results["ward"] = list(ward_result)
}
# Hybrid hierarchial method
if("hybrid" %in% technique){
cat("\nPerforming Hybrid hierarchical clustering...\n")
hybrid_result = hybridHclust(binarydataf)
results["hybrid"] = list(hybrid_result)
}
# probability based clustering
if("prob" %in% technique){
library(PythonInR)
cat("\nPerforming Bayes Bernoulli Mixture Model clustering. It might take a while depending on number of simulations...\n")
setwd("Python")
pyConnect()
pyExec("import pandas")
cat("\tTransferring variables to Python...\n")
pySet("data", value = binarydataf, usePandas = TRUE)
pySet("nclusters", value = nclust, usePandas = TRUE)
pySet("nsimulations", value = nsim, usePandas = TRUE)
cat("\tExecuting the script...")
pyExecfile("simpleModelbased.py") # running
mixture_result = list()
mixture_result["mixtgroup"] = pyGet("modelclust", simplify = FALSE) + 1
mixture_result["mixtprob"] = pyGet("clustprob", simplify = TRUE)
mixture_result["mixtprototypes"] = pyGet("prototype", simplify = TRUE)
pyExit()
results["mixture"] = list(mixture_result)
}
#cluster.stats(distances, kmeans_result[[i]]@cluster)$avg
cat("\n")
return(results)
}
results = studyplan_finder(clusterdataf, technique = list("prob"), nclust = 2, nsim = 20)
results$mixture$mixtgroup
results$mixture$mixtprob
studyplan_finder = function(binarydataf, technique, nclust, nsim = 1, return_class = TRUE){
library(flexclust)
library(cluster)
library(fpc)
library(hybridHclust)
if(class(binarydataf) != "data.frame") warning("Input should be a binary data frame.")
if(class(technique) != "list") stop("Should provide a list of valid clustering techniques. Please input a list of techniques.")
if(length(nclust) == 1) if(nclust == 0) stop("At least one cluster is needed to perform analysis.")
results = list()
cat("\nComputing distance matrix for binary variables...\n")
distances = daisy(binarydataf,
type = list(asymm = c(1:ncol(binarydataf))), # threating the variables as asymmetric binaries
metric = "gower")
# K - means
if("k-means" %in% technique){
cat("\nPerforming k-means clustering. It might take a while depending on number of simulations...\n")
kmeans_result = stepFlexclust(binarydataf, k = nclust, nrep = nsim, FUN = cclust, multicore = TRUE)
results["kmeans"] = kmeans_result
}
# K-medoids
if("k-medoids" %in% technique){
cat("\nPerforming k-medoids clustering...\n")
kmedoids_result = pamk(distances, krange = nclust, criterion = "asw", diss = TRUE)
results["kmedoids"] = kmedoids_result
}
# Ward method
if("ward" %in% technique){
cat("\nPerforming Ward hierarchical clustering...\n")
ward_result = hclust(distances, method = "ward.D")
print(class(ward_result))
results["ward"] = list(ward_result)
}
# Hybrid hierarchial method
if("hybrid" %in% technique){
cat("\nPerforming Hybrid hierarchical clustering...\n")
hybrid_result = hybridHclust(binarydataf)
results["hybrid"] = list(hybrid_result)
}
# probability based clustering
if("prob" %in% technique){
library(PythonInR)
cat("\nPerforming Bayes Bernoulli Mixture Model clustering. It might take a while depending on number of simulations...\n")
setwd("Python")
pyConnect()
pyExec("import pandas")
cat("\tTransferring variables to Python...\n")
pySet("data", value = binarydataf, usePandas = TRUE)
pySet("nclusters", value = nclust, usePandas = TRUE)
pySet("nsimulations", value = nsim, usePandas = TRUE)
cat("\tExecuting the script...")
pyExecfile("simpleModelbased.py") # running
mixtgroup = pyGet("modelclust", simplify = FALSE) + 1
mixtprob = pyGet("clustprob", simplify = TRUE)
mixtprototypes = pyGet("prototype", simplify = TRUE)
pyExit()
mixture_result = list(mixtgroup, mixtprob, mixtprototypes, names = "Group")
results["mixture"] = list(mixture_result)
}
#cluster.stats(distances, kmeans_result[[i]]@cluster)$avg
cat("\n")
return(results)
}
studyplan_finder = function(binarydataf, technique, nclust, nsim = 1, return_class = TRUE){
library(flexclust)
library(cluster)
library(fpc)
library(hybridHclust)
if(class(binarydataf) != "data.frame") warning("Input should be a binary data frame.")
if(class(technique) != "list") stop("Should provide a list of valid clustering techniques. Please input a list of techniques.")
if(length(nclust) == 1) if(nclust == 0) stop("At least one cluster is needed to perform analysis.")
results = list()
cat("\nComputing distance matrix for binary variables...\n")
distances = daisy(binarydataf,
type = list(asymm = c(1:ncol(binarydataf))), # threating the variables as asymmetric binaries
metric = "gower")
# K - means
if("k-means" %in% technique){
cat("\nPerforming k-means clustering. It might take a while depending on number of simulations...\n")
kmeans_result = stepFlexclust(binarydataf, k = nclust, nrep = nsim, FUN = cclust, multicore = TRUE)
results["kmeans"] = kmeans_result
}
# K-medoids
if("k-medoids" %in% technique){
cat("\nPerforming k-medoids clustering...\n")
kmedoids_result = pamk(distances, krange = nclust, criterion = "asw", diss = TRUE)
results["kmedoids"] = kmedoids_result
}
# Ward method
if("ward" %in% technique){
cat("\nPerforming Ward hierarchical clustering...\n")
ward_result = hclust(distances, method = "ward.D")
print(class(ward_result))
results["ward"] = list(ward_result)
}
# Hybrid hierarchial method
if("hybrid" %in% technique){
cat("\nPerforming Hybrid hierarchical clustering...\n")
hybrid_result = hybridHclust(binarydataf)
results["hybrid"] = list(hybrid_result)
}
# probability based clustering
if("prob" %in% technique){
library(PythonInR)
cat("\nPerforming Bayes Bernoulli Mixture Model clustering. It might take a while depending on number of simulations...\n")
setwd("Python")
pyConnect()
pyExec("import pandas")
cat("\tTransferring variables to Python...\n")
pySet("data", value = binarydataf, usePandas = TRUE)
pySet("nclusters", value = nclust, usePandas = TRUE)
pySet("nsimulations", value = nsim, usePandas = TRUE)
cat("\tExecuting the script...")
pyExecfile("simpleModelbased.py") # running
mixtgroup = pyGet("modelclust", simplify = FALSE) + 1
mixtprob = pyGet("clustprob", simplify = TRUE)
mixtprototypes = pyGet("prototype", simplify = TRUE)
pyExit()
mixture_result = list(mixtgroup, mixtprob, mixtprototypes, names = "Group")
results["mixture"] = list(mixture_result)
}
#cluster.stats(distances, kmeans_result[[i]]@cluster)$avg
cat("\n")
return(results)
}
results = studyplan_finder(clusterdataf, technique = list("prob"), nclust = 2, nsim = 20)
results$mixture$names
results$mixture$``
results$mixture
studyplan_finder = function(binarydataf, technique, nclust, nsim = 1, return_class = TRUE){
library(flexclust)
library(cluster)
library(fpc)
library(hybridHclust)
if(class(binarydataf) != "data.frame") warning("Input should be a binary data frame.")
if(class(technique) != "list") stop("Should provide a list of valid clustering techniques. Please input a list of techniques.")
if(length(nclust) == 1) if(nclust == 0) stop("At least one cluster is needed to perform analysis.")
results = list()
cat("\nComputing distance matrix for binary variables...\n")
distances = daisy(binarydataf,
type = list(asymm = c(1:ncol(binarydataf))), # threating the variables as asymmetric binaries
metric = "gower")
# K - means
if("k-means" %in% technique){
cat("\nPerforming k-means clustering. It might take a while depending on number of simulations...\n")
kmeans_result = stepFlexclust(binarydataf, k = nclust, nrep = nsim, FUN = cclust, multicore = TRUE)
results["kmeans"] = kmeans_result
}
# K-medoids
if("k-medoids" %in% technique){
cat("\nPerforming k-medoids clustering...\n")
kmedoids_result = pamk(distances, krange = nclust, criterion = "asw", diss = TRUE)
results["kmedoids"] = kmedoids_result
}
# Ward method
if("ward" %in% technique){
cat("\nPerforming Ward hierarchical clustering...\n")
ward_result = hclust(distances, method = "ward.D")
print(class(ward_result))
results["ward"] = list(ward_result)
}
# Hybrid hierarchial method
if("hybrid" %in% technique){
cat("\nPerforming Hybrid hierarchical clustering...\n")
hybrid_result = hybridHclust(binarydataf)
results["hybrid"] = list(hybrid_result)
}
# probability based clustering
if("prob" %in% technique){
library(PythonInR)
cat("\nPerforming Bayes Bernoulli Mixture Model clustering. It might take a while depending on number of simulations...\n")
setwd("Python")
pyConnect()
pyExec("import pandas")
cat("\tTransferring variables to Python...\n")
pySet("data", value = binarydataf, usePandas = TRUE)
pySet("nclusters", value = nclust, usePandas = TRUE)
pySet("nsimulations", value = nsim, usePandas = TRUE)
cat("\tExecuting the script...")
pyExecfile("simpleModelbased.py") # running
mixtgroup = pyGet("modelclust", simplify = FALSE) + 1
mixtprob = pyGet("clustprob", simplify = TRUE)
mixtprototypes = pyGet("prototype", simplify = TRUE)
pyExit()
mixture_result = list(clusters = mixtgroup, clusterprob = mixtprob, prototypes = mixtprototypes)
results["mixture"] = list(mixture_result)
}
#cluster.stats(distances, kmeans_result[[i]]@cluster)$avg
cat("\n")
return(results)
}
studyplan_finder = function(binarydataf, technique, nclust, nsim = 1, return_class = TRUE){
library(flexclust)
library(cluster)
library(fpc)
library(hybridHclust)
if(class(binarydataf) != "data.frame") warning("Input should be a binary data frame.")
if(class(technique) != "list") stop("Should provide a list of valid clustering techniques. Please input a list of techniques.")
if(length(nclust) == 1) if(nclust == 0) stop("At least one cluster is needed to perform analysis.")
results = list()
cat("\nComputing distance matrix for binary variables...\n")
distances = daisy(binarydataf,
type = list(asymm = c(1:ncol(binarydataf))), # threating the variables as asymmetric binaries
metric = "gower")
# K - means
if("k-means" %in% technique){
cat("\nPerforming k-means clustering. It might take a while depending on number of simulations...\n")
kmeans_result = stepFlexclust(binarydataf, k = nclust, nrep = nsim, FUN = cclust, multicore = TRUE)
results["kmeans"] = kmeans_result
}
# K-medoids
if("k-medoids" %in% technique){
cat("\nPerforming k-medoids clustering...\n")
kmedoids_result = pamk(distances, krange = nclust, criterion = "asw", diss = TRUE)
results["kmedoids"] = kmedoids_result
}
# Ward method
if("ward" %in% technique){
cat("\nPerforming Ward hierarchical clustering...\n")
ward_result = hclust(distances, method = "ward.D")
print(class(ward_result))
results["ward"] = list(ward_result)
}
# Hybrid hierarchial method
if("hybrid" %in% technique){
cat("\nPerforming Hybrid hierarchical clustering...\n")
hybrid_result = hybridHclust(binarydataf)
results["hybrid"] = list(hybrid_result)
}
# probability based clustering
if("prob" %in% technique){
library(PythonInR)
cat("\nPerforming Bayes Bernoulli Mixture Model clustering. It might take a while depending on number of simulations...\n")
setwd("Python")
pyConnect()
pyExec("import pandas")
cat("\tTransferring variables to Python...\n")
pySet("data", value = binarydataf, usePandas = TRUE)
pySet("nclusters", value = nclust, usePandas = TRUE)
pySet("nsimulations", value = nsim, usePandas = TRUE)
cat("\tExecuting the script...")
pyExecfile("simpleModelbased.py") # running
mixtgroup = pyGet("modelclust", simplify = FALSE) + 1
mixtprob = pyGet("clustprob", simplify = TRUE)
mixtprototypes = pyGet("prototype", simplify = TRUE)
pyExit()
mixture_result = list(clusters = mixtgroup, clusterprob = mixtprob, prototypes = mixtprototypes)
results["mixture"] = list(mixture_result)
}
#cluster.stats(distances, kmeans_result[[i]]@cluster)$avg
cat("\n")
return(results)
}
results = studyplan_finder(clusterdataf, technique = list("prob"), nclust = 2, nsim = 20)
names(results)
results$mixture
results$mixture$prototypes
results$mixture$clusters
hist(results$mixture$clusters)
results = studyplan_finder(clusterdataf, technique = list("kmeans"), nclust = 2, nsim = 20)
results = studyplan_finder(clusterdataf, technique = list("kmeans", "ward"), nclust = 2, nsim = 20)
results = studyplan_finder(clusterdataf, technique = list("k-means", "ward"), nclust = 2, nsim = 20)
results = studyplan_finder(clusterdataf, technique = list("k-means", "ward"), nclust = 2, nsim = 100)
studyplan_finder = function(binarydataf, technique, nclust, nsim = 1, return_class = TRUE){
library(flexclust)
library(cluster)
library(fpc)
library(hybridHclust)
if(class(binarydataf) != "data.frame") warning("Input should be a binary data frame.")
if(class(technique) != "list") stop("Should provide a list of valid clustering techniques. Please input a list of techniques.")
if(length(nclust) == 1) if(nclust == 0) stop("At least one cluster is needed to perform analysis.")
results = list()
cat("\nComputing distance matrix for binary variables...\n")
distances = daisy(binarydataf,
type = list(asymm = c(1:ncol(binarydataf))), # threating the variables as asymmetric binaries
metric = "gower")
# K - means
if("k-means" %in% technique){
cat("\nPerforming k-means clustering. It might take a while depending on number of simulations...\n")
kmeans_result = stepFlexclust(binarydataf, k = nclust, nrep = nsim, FUN = cclust, multicore = TRUE, verbose = FALSE)
results["kmeans"] = list(kmeans_result)
}
# K-medoids
if("k-medoids" %in% technique){
cat("\nPerforming k-medoids clustering...\n")
kmedoids_result = pamk(distances, krange = nclust, criterion = "asw", diss = TRUE)
results["kmedoids"] = kmedoids_result
}
# Ward method
if("ward" %in% technique){
cat("\nPerforming Ward hierarchical clustering...\n")
ward_result = hclust(distances, method = "ward.D")
results["ward"] = list(ward_result)
}
# Hybrid hierarchial method
if("hybrid" %in% technique){
cat("\nPerforming Hybrid hierarchical clustering...\n")
hybrid_result = hybridHclust(binarydataf)
results["hybrid"] = list(hybrid_result)
}
# probability based clustering
if("prob" %in% technique){
library(PythonInR)
cat("\nPerforming Bayes Bernoulli Mixture Model clustering. It might take a while depending on number of simulations...\n")
setwd("Python")
pyConnect()
pyExec("import pandas")
cat("\tTransferring variables to Python...\n")
pySet("data", value = binarydataf, usePandas = TRUE)
pySet("nclusters", value = nclust, usePandas = TRUE)
pySet("nsimulations", value = nsim, usePandas = TRUE)
cat("\tExecuting the script...")
pyExecfile("simpleModelbased.py") # running
mixtgroup = pyGet("modelclust", simplify = FALSE) + 1
mixtprob = pyGet("clustprob", simplify = TRUE)
mixtprototypes = pyGet("prototype", simplify = TRUE)
pyExit()
mixture_result = list(clusters = mixtgroup, clusterprob = mixtprob, prototypes = mixtprototypes)
results["mixture"] = list(mixture_result)
}
#cluster.stats(distances, kmeans_result[[i]]@cluster)$avg
cat("\n")
return(results)
}
results = studyplan_finder(clusterdataf, technique = list("k-means", "ward"), nclust = 2, nsim = 100)
results$kmeans@centers
results$kmeans@clusters
results$kmeans@cluster
source("R/external_functions.R")
getwd()
setwd("D:/Box Sync/#UNI/Materiale tesi/Analysis/ThesisAnalysis")
source("R/external_functions.R")
source("R/external_functions.R")
source("R/external_functions.R")
results = studyplan_finder(clusterdataf, technique = list("k-means", "ward"), nclust = 2, nsim = 100)
