hist(clustergroup[,i], main = i)
}
par(mfrow = c(1,1))
# medoids, centroids and prototypes comparison
par(mfrow = c(3,1))
image(round(t(results$kmeans@centers)), axes = FALSE, main = "K-means Centroids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[results$kmedoids[[1]]$medoids,]), axes = FALSE, main = "K-medoids Medoids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
# jaccard similarity coefficient
temp = clusterboot(datafexam, B = 500, clustermethod = kmeansCBI, krange = 3)
plot(temp)
rm(temp)
# evaluations
# jaccard similarity coefficient
temp = clusterboot(datafexam_reduced, B = 500, clustermethod = kmeansCBI, krange = 4)
plot(temp) # we see that those are not so stable anymore!
rm(temp)
source("R/external_functions.R")
# medoids, centroids and prototypes comparison
par(mfrow = c(3,1))
image(round(t(results$kmeans@centers)), axes = FALSE, main = "K-means Centroids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[results$kmedoids[[1]]$medoids,]), axes = FALSE, main = "K-medoids Medoids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
library(spatstat)
plot(
as.im(as.matrix(exam_frequencies$mixture),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
abline(v = c(30.5, 60.5), col = "white", lwd = 2)
par(mfrow= c(1,1))
library(spatstat)
plot(
as.im(as.matrix(exam_frequencies$mixture),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
abline(v = c(30.5, 60.5), col = "white", lwd = 2)
temp = clusterboot(datafexam, B = 500, clustermethod = kmeansCBI, krange = 3)
plot(temp)
rm(temp)
plot(results0$ward, labels = other_info$immyear) # ward also seems to be well defined with 3 clusters
plot(results0$ward, labels = other_info$immyear, main = "") # ward also seems to be well defined with 3 clusters
plot(results0$ward, labels = FALSE, main = "") # ward also seems to be well defined with 3 clusters
identify(results0$ward, mostFollowed) # click over a branch to see the most followed courses!
plot(results0$ward, labels = FALSE, main = "") # ward also seems to be well defined with 3 clusters
identify(results0$ward, mostFollowed) # click over a branch to see the most followed courses!
plot(results0$ward, labels = FALSE, main = "") # ward also seems to be well defined with 3 clusters
identify(results0$ward, mostFollowed) # click over a branch to see the most followed courses!
hist(results0$mixture$clusters) # mixture-model expectation maximization converged to three main clusters
par(mfrow = c(2,2))
for(i in names(clustergroup)){
hist(clustergroup[,i], main = i)
}
par(mfrow = c(1,1))
exam_frequencies = list()
for(i in names(clustergroup)){
cat("\nInside cluster exam frequencies for", i, "clustering methods\n")
exam_frequencies[[i]] = mostFollowed_byclust(clustergroup = clustergroup[,i], X = datafexam, percentage = 0.6, graph = F)
}
par(mfrow = c(3,1))
image(round(t(results$kmeans@centers)), axes = FALSE, main = "K-means Centroids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[results$kmedoids[[1]]$medoids,]), axes = FALSE, main = "K-medoids Medoids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
par(mfrow = c(1,1))
results0$kmeans # we choose three clusters for k-means
hist(results0$mixture$clusters) # mixture-model expectation maximization converged to three main clusters
plot(results0$kmeans)
?clusterboot
temp = clusterboot(datafexam, B = 500, clustermethod = kmeansCBI, krange = 3)
source("R/external_functions.R")
temp = clusterboot(datafexam, B = 500, clustermethod = kmeansCBI, krange = 3)
plot(temp)
rm(temp)
help(clusterboot)
plot(
as.im(as.matrix(exam_frequencies$mixture),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
par(mfrow = c(2,2))
for(i in names(clustergroup)){
hist(clustergroup[,i], main = i)
}
par(mfrow = c(1,1))
clustergroup$kmeans
exams_frequencies
exam_frequencies
exam_frequencies$mixture
exam_frequencies = list()
for(i in names(clustergroup)){
cat("\nInside cluster exam frequencies for", i, "clustering methods\n")
exam_frequencies[[i]] = mostFollowed_byclust(clustergroup = clustergroup[,i], X = datafexam, percentage = 0.6, graph = F)
}
source("R/external_functions.R")
temp = clusterboot(datafexam_reduced, B = 500, clustermethod = kmeansCBI, krange = 4)
tempo
temp
?clusterboot
plot(temp) # we see that those are not so stable anymore!
rm(temp)
bootFlexclust(datafexam_reduced, 2)
temp = bootFlexclust(datafexam_reduced, 2)
plot(temp)
temp = bootFlexclust(datafexam, 3)
plot(temp)
temp@centers1
temp@rand
source("R/external_functions.R")
par(mfrow = c(3,1))
image(round(t(results$kmeans@centers)), axes = FALSE, main = "K-means Centroids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[results$kmedoids[[1]]$medoids,]), axes = FALSE, main = "K-medoids Medoids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
par(mfrow = c(1,1))
image(t(clusterdataf[results$kmedoids[[1]]$medoids, c(1,3,2)]), axes = FALSE, main = "K-medoids Medoids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
par(mfrow = c(1,1))
image(t(clusterdataf[results$kmedoids[[1]]$medoids, c(1,3,2)]), axes = FALSE, main = "K-medoids Medoids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
par(mfrow = c(1,1))
image(t(clusterdataf[results$kmedoids[[1]]$medoids, 1:3]), axes = FALSE, main = "K-medoids Medoids")
image(t(clusterdataf[results$kmedoids[[1]]$medoids, ]), axes = FALSE, main = "K-medoids Medoids")
results$kmedoids[[1]]$medoids
image(t(clusterdataf[results$kmedoids[[1]]$medoids[1], ]), axes = FALSE, main = "K-medoids Medoids")
image(t(clusterdataf[results$kmedoids[[1]]$medoids[c(1,3,2)], ]), axes = FALSE, main = "K-medoids Medoids")
par(mfrow = c(3,1))
image(round(t(results$kmeans@centers)), axes = FALSE, main = "K-means Centroids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[results$kmedoids[[1]]$medoids[c(1,3,2)], ]), axes = FALSE, main = "K-medoids Medoids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
par(mfrow = c(1,1))
par(mfrow = c(3,1))
image(round(t(results$kmeans@centers)), axes = FALSE, main = "K-means Centroids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[results$kmedoids[[1]]$medoids[c(3,1,2)], ]), axes = FALSE, main = "K-medoids Medoids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
par(mfrow = c(1,1))
par(mfrow = c(3,1))
image(round(t(results$kmeans@centers)), axes = FALSE, main = "K-means Centroids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[results$kmedoids[[1]]$medoids[c(2,1,3)], ]), axes = FALSE, main = "K-medoids Medoids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
par(mfrow = c(1,1))
apriori_rules
apriori_rules@info
apriori_rules@lhs
apriori_rules@rhs
plot(apriori_rules)
rm(apriori_rules)
source("R/external_functions.R")
datafexam_reduced
clustergroup$mixture
cbind(clustergroup_reduced$mixture, datafexam_reduced)
write.csv(cbind(clustergroup_reduced$mixture, datafexam_reduced), "matrice.csv")
plot(results0$kmeans)
source("R/external_functions.R")
results0$kmeans # we choose three clusters for k-means
plot(results0$kmeans)
# jaccard similarity coefficient
temp = clusterboot(datafexam, B = 500, clustermethod = kmeansCBI, krange = 3)
plot(temp)
rm(temp)
plot(
as.im(as.matrix(exam_frequencies$mixture),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
library(spatstat)
plot(
as.im(as.matrix(exam_frequencies$mixture),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
abline(v = c(30.5, 60.5), col = "white", lwd = 2)
plot(
as.im(as.matrix(exam_frequencies$mixture),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Between Clusters")
abline(v = c(30.5, 60.5), col = "white", lwd = 2)
# evaluations
# jaccard similarity coefficient
temp = clusterboot(datafexam_reduced, B = 500, clustermethod = kmeansCBI, krange = 4)
plot(temp) # we see that those are not so stable anymore!
rm(temp)
# evaluations
# jaccard similarity coefficient
temp = clusterboot(datafexam_reduced, B = 500, clustermethod = kmeansCBI, krange = 4)
plot(temp) # we see that those are not so stable anymore!
rm(temp)
# evaluations
# jaccard similarity coefficient
temp = clusterboot(datafexam_reduced, B = 500, clustermethod = kmeansCBI, krange = 4)
plot(temp) # we see that those are not so stable anymore!
rm(temp)
windows()
# evaluations
# jaccard similarity coefficient
temp = clusterboot(datafexam_reduced, B = 500, clustermethod = kmeansCBI, krange = 4)
plot(temp) # we see that those are not so stable anymore!
rm(temp)
library(readxl)
voti = read_excel("data/laureati.xls", sheet = "descrittiva") # import of the third recode
head(voti)
voti = read_excel("data/laureati.xls", sheet = "descrittiva") # import of the third recode
head(voti)
head(laureati)
head(as.data.frame(voti))
voti = as.data.frame(voti)
head(laureati)
laureati$matricola == voti$matricola
voti$matricola
voti$matricola in laureati$matricola
voti$matricola
voti$matricola in 1
if(voti$matricola in laureati$matricola)
voti$matricola %in% laureati$matricola
voti[voti$matricola %in% laureati$matricola]
voti[voti$matricola %in% laureati$matricola, ]
dim(voti[voti$matricola %in% laureati$matricola, ])
dim(voti)
for(i in 1:length(voti))
{}
voti[i,]
for(i in 1:length(voti)){
voti[i,]
}
for(i in 1:length(voti)){
voti[i,]
}
for(i in 1:length(voti)){
cat(voti[i,])
}
print(voti[i,])
for(i in 1:length(voti)){
print(voti[i,])
}
for(i in 1:length(voti)){
print(voti[i,])
}
for(i in 1:nrow(voti)){
print(voti[i,])
}
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if(laureati$matricola == voti$matricola)
print(k, i)
}
}
warnings()
laureati$matricola[i]
laureati$matricola[1243]
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if(laureati$matricola[i] == voti$matricola[k])
print(k, "", i)
}
}
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if(laureati$matricola[i] == voti$matricola[k])
print(k, i)
}
}
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if(laureati$matricola[i] == voti$matricola[k])
print(laureati$matricola[i])
}
}
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
print(laureati[i])
}
}
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
print(laureati[i,])
}
}
laureati_voti = data.frame(NULL)
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
laureati_voti[i] = cbind(laureati$matricola[i,], voti[k,"voto"])
}
}
laureati_voti = data.frame(NULL)
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
laureati_voti[i,] = cbind(laureati$matricola[i,], voti[k,"voto"])
}
}
laureati_voti = data.frame(NULL, ncol = 4)
laureati_voti = data.frame(NULL)
laureati_voti
?data.frame
laureati_voti = data.frame("Mat", "ASD")
laureati_voti
voti[k,"voto"]
laureati_voti = data.frame("Mat", "cod", "deno", "voto")
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
laureati_voti[i,] = cbind(laureati$matricola[i,], voti[k,"voto"])
}
}
laureati_voti = data.frame("Mat", "cod", "deno", "voto")
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
laureati_voti[i,] = cbind(laureati[i,], voti[k,"voto"])
}
}
laureati_voti
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
print(cbind(laureati[i,], voti[k,"voto"]))
}
}
laureati_voti = NULL
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
laureati_voti[i] = print(cbind(laureati[i,], voti[k,"voto"]))
}
}
laureati_voti
laureati_voti = NULL
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
laureati_voti[i] = (cbind(laureati[i,], voti[k,"voto"]))
}
}
laureati_voti
laureati_voti = NULL
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
laureati_voti[i, ] = (cbind(laureati[i,], voti[k,"voto"]))
}
}
laureati_voti = matrix(nrow = nrow(laureati), ncol = 4)
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
laureati_voti[i, ] = (cbind(laureati[i,], voti[k,"voto"]))
}
}
laureati_voti = matrix(nrow = nrow(laureati), ncol = 4)
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
laureati_voti[i] = (cbind(laureati[i,], voti[k,"voto"]))
}
}
laureati_voti
laureati_voti = laureati
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
laureati_voti[i, "voto"] = (cbind(laureati[i,], voti[k,"voto"]))
}
}
laureati_voti
head(laureati_voti)
laureati_voti = laureati
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
laureati_voti[i, "voto"] = voti[k,"voto"]
}
}
head(laureati_voti)
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
laureati_voti[i, "voto"] = voti[k,"voto"]
cat(i/nrow(laureati))
}
}
laureati_voti = laureati
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
laureati_voti[i, "voto"] = voti[k,"voto"]
print(i/nrow(laureati))
}
}
laureati_voti = laureati
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
laureati_voti[i, "voto"] = voti[k,"voto"]
}
print(i/nrow(laureati)*100)
}
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
laureati_voti[i, "voto"] = voti[k,"voto"]
}
print(i/nrow(laureati)*100)
}
laureati_voti = laureati
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
laureati_voti[i, "voto"] = voti[k,"voto"]
}
print(i/nrow(laureati)*100)
}
head(laureati_voti)
laureati_voti$voto
laureati_voti = laureati
for(i in 1:nrow(laureati)){
for(k in 1:nrow(voti)){
if((laureati$matricola[i] == voti$matricola[k]) &  (laureati$`Materia Esame (cod)`[i] == voti$`Materia Esame (cod)`[k]))
laureati_voti[i, "voto"] = voti[k,"voto"]
}
print(i/nrow(laureati)*100)
}
laureati_voti
datafmarks = data.frame(NULL) # initializing the dataframe
for(i in 1:nrow(X)){
mat = laureati_voti[i, 1]
exam = laureati_voti[i, 3]
datafmarks[mat, exam] = laureati_voti[i, 4]
}
for(i in 1:nrow(laureati_voti)){
mat = laureati_voti[i, 1]
exam = laureati_voti[i, 3]
datafmarks[mat, exam] = laureati_voti[i, 4]
}
datafmarks
apply(datafmarks, 1, mean)
apply(datafmarks, 1, mean, na.rm = T)
length(apply(datafmarks, 1, mean, na.rm = T))
apply(datafmarks, 2, mean)
apply(datafmarks, 2, mean, na.rm = T)
datafmarks$`PROCESSI E TECNICHE DI DATA MINING M`
datafmarks[,`PROCESSI E TECNICHE DI DATA MINING M`]
datafmarks[,PROCESSI E TECNICHE DI DATA MINING M]
datafmarks[,"PROCESSI E TECNICHE DI DATA MINING M""]
]☺
datafmarks[,"PROCESSI E TECNICHE DI DATA MINING M"]
cbind(rownames(datafmarks), datafmarks$`PROCESSI E TECNICHE DI DATA MINING M`)
datafmarks$`CALCOLATORI ELETTRONICI M`
mean(datafmarks$`CALCOLATORI ELETTRONICI M`, na.rm = T)
apply(datafmarks, 2, mean, na.rm = T)
datafmarks$`CAMPI ELETTROMAGNETICI E SISTEMI D'ANTENNA M`
summary(datafmarks)
mean(datafmarks$`CALCOLATORI ELETTRONICI M`, na.rm = T)
apply(datafmarks, 2, mean, na.rm = T)
apply(datafmarks, 2, mean, na.rm = T)[1]
hist(datafmarks)
hist(datafmarks$`CALCOLATORI ELETTRONICI M`)
hist(datafmarks$`CALCOLATORI ELETTRONICI M`)
hist(datafmarks$`SISTEMI MOBILI M`)
hist(datafmarks$`FONDAMENTI DI INTELLIGENZA ARTIFICIALE M`)
hist(datafmarks$`CALCOLATORI ELETTRONICI M`)
hist(datafmarks$`FONDAMENTI DI INTELLIGENZA ARTIFICIALE M`)
hist(datafmarks$`ATTIVITÀ PROGETTUALE DI SICUREZZA DELL'INFORMAZIONE M`)
hist(datafmarks$sistemi `SISTEMI DISTRIBUITI M`)
hist(datafmarks$`SISTEMI DISTRIBUITI M`)
hist(datafmarks$`CALCOLATORI ELETTRONICI M`)
hist(datafmarks$`FONDAMENTI DI INTELLIGENZA ARTIFICIALE M`)
hist(datafmarks$`SISTEMI DISTRIBUITI M`)
hist(datafmarks$`CALCOLATORI ELETTRONICI M`)
hist(datafmarks$`CALCOLATORI ELETTRONICI M`, breaks = 30-18)
hist(datafmarks$`FONDAMENTI DI INTELLIGENZA ARTIFICIALE M`)
hist(datafmarks$`SISTEMI DISTRIBUITI M`, breaks = 30-18)
