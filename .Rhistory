prova = data.frame(NULL, row.names = colnames(clusterdataf))
colnames(clusterdataf)
?data.frame
mostFollowed_byclust = function(clustergroup, percentage = 0.7, graph = TRUE, verbose = TRUE){
cluster_number = levels(factor(clustergroup))
if(graph == TRUE) hist(clustergroup, main = "Distribution of clusters", breaks = length(cluster_number), col = "lightblue")
exam_per_group = data.frame(x = 1:ncol(clusterdataf), y = length(cluster_number),  row.names = colnames(clusterdataf))
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i) # select the cluster instances
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # selecting more frequent courses
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
exam_per_group[,i] = course_freq
if (verbose == TRUE){
print(paste("Group ", i, "of dimention", length(names(clusterdataf)[k == T])))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
return(exam_per_group)
}
mostFollowed_byclust(other_info[,3], percentage = 0.2)
mostFollowed_byclust = function(clustergroup, percentage = 0.7, graph = TRUE, verbose = TRUE){
cluster_number = levels(factor(clustergroup))
if(graph == TRUE) hist(clustergroup, main = "Distribution of clusters", breaks = length(cluster_number), col = "lightblue")
exam_per_group = data.frame(1:ncol(clusterdataf),  row.names = colnames(clusterdataf))
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i) # select the cluster instances
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # selecting more frequent courses
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
exam_per_group[,i] = course_freq
if (verbose == TRUE){
print(paste("Group ", i, "of dimention", length(names(clusterdataf)[k == T])))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
return(exam_per_group)
}
mostFollowed_byclust(other_info[,3], percentage = 0.2)
exam_per_group = data.frame(NULL,  row.names = colnames(clusterdataf))
mostFollowed_byclust = function(clustergroup, percentage = 0.7, graph = TRUE, verbose = TRUE){
cluster_number = levels(factor(clustergroup))
if(graph == TRUE) hist(clustergroup, main = "Distribution of clusters", breaks = length(cluster_number), col = "lightblue")
exam_per_group = data.frame(NULL,  row.names = colnames(clusterdataf))
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i) # select the cluster instances
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # selecting more frequent courses
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
exam_per_group[,i] = course_freq
if (verbose == TRUE){
print(paste("Group ", i, "of dimention", length(names(clusterdataf)[k == T])))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
return(exam_per_group)
}
exam_per_group = data.frame(NULL,  row.names = colnames(clusterdataf))
mostFollowed_byclust = function(clustergroup, percentage = 0.7, graph = TRUE, verbose = TRUE){
cluster_number = levels(factor(clustergroup))
if(graph == TRUE) hist(clustergroup, main = "Distribution of clusters", breaks = length(cluster_number), col = "lightblue")
exam_per_group = data.frame(1:ncol(clusterdataf),  row.names = colnames(clusterdataf))
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i) # select the cluster instances
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # selecting more frequent courses
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
#exam_per_group[,i] = course_freq
if (verbose == TRUE){
print(paste("Group ", i, "of dimention", length(names(clusterdataf)[k == T])))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
return(exam_per_group)
}
return(exam_per_group)
exam_per_group = data.frame(NULL,  row.names = colnames(clusterdataf))
mostFollowed_byclust = function(clustergroup, percentage = 0.7, graph = TRUE, verbose = TRUE){
cluster_number = levels(factor(clustergroup))
if(graph == TRUE) hist(clustergroup, main = "Distribution of clusters", breaks = length(cluster_number), col = "lightblue")
exam_per_group = data.frame(1:ncol(clusterdataf),  row.names = colnames(clusterdataf))
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i) # select the cluster instances
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # selecting more frequent courses
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
#exam_per_group[,i] = course_freq
if (verbose == TRUE){
print(paste("Group ", i, "of dimention", length(names(clusterdataf)[k == T])))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
return(exam_per_group)
}
exam_per_group = data.frame(NULL,  row.names = colnames(clusterdataf))
mostFollowed_byclust = function(clustergroup, percentage = 0.7, graph = TRUE, verbose = TRUE){
cluster_number = levels(factor(clustergroup))
if(graph == TRUE) hist(clustergroup, main = "Distribution of clusters", breaks = length(cluster_number), col = "lightblue")
exam_per_group = data.frame(1:ncol(clusterdataf),  row.names = colnames(clusterdataf))
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i) # select the cluster instances
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # selecting more frequent courses
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
#exam_per_group[,i] = course_freq
if (verbose == TRUE){
print(paste("Group ", i, "of dimention", length(names(clusterdataf)[k == T])))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
return(exam_per_group)
}
mostFollowed_byclust(other_info[,3], percentage = 0.2)
mostFollowed_byclust = function(clustergroup, percentage = 0.7, graph = TRUE, verbose = TRUE){
cluster_number = levels(factor(clustergroup))
if(graph == TRUE) hist(clustergroup, main = "Distribution of clusters", breaks = length(cluster_number), col = "lightblue")
exam_per_group = data.frame(row.names = colnames(clusterdataf))
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i) # select the cluster instances
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # selecting more frequent courses
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
#exam_per_group[,i] = course_freq
if (verbose == TRUE){
print(paste("Group ", i, "of dimention", length(names(clusterdataf)[k == T])))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
return(exam_per_group)
}
mostFollowed_byclust(other_info[,3], percentage = 0.2)
mostFollowed_byclust = function(clustergroup, percentage = 0.7, graph = TRUE, verbose = TRUE){
cluster_number = levels(factor(clustergroup))
if(graph == TRUE) hist(clustergroup, main = "Distribution of clusters", breaks = length(cluster_number), col = "lightblue")
exam_per_group = data.frame(row.names = colnames(clusterdataf))
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i) # select the cluster instances
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # selecting more frequent courses
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
exam_per_group[,i] = course_freq
if (verbose == TRUE){
print(paste("Group ", i, "of dimention", length(names(clusterdataf)[k == T])))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
return(exam_per_group)
}
mostFollowed_byclust(other_info[,3], percentage = 0.2)
image(mostFollowed_byclust(other_info[,3], percentage = 0.2))
image(as.matrix(mostFollowed_byclust(other_info[,3], percentage = 0.2)))
image(as.matrix(mostFollowed_byclust(other_info[,3], percentage = 0.2)), col = grey.colors(30))
image(as.matrix(mostFollowed_byclust(other_info[,3], percentage = 0.2)), col = grey.colors(5))
image(as.matrix(mostFollowed_byclust(other_info[,3], percentage = 0.2)), col = grey.colors(50))
image(as.matrix(mostFollowed_byclust(other_info[,3], percentage = 0.2)), col = grey.colors(3))
image(as.matrix(mostFollowed_byclust(other_info[,3], percentage = 0.2)), col = grey.colors(15))
image(as.matrix(mostFollowed_byclust(other_info[,3], percentage = 0.2)), col = grey.colors(10))
library(spatstat)
as.im(as.matrix(mostFollowed_byclust(other_info[,3], percentage = 0.2)), col = grey.colors(10))
as.im(as.matrix(mostFollowed_byclust(other_info[,3], percentage = 0.2)))
plot(as.im(as.matrix(mostFollowed_byclust(other_info[,3], percentage = 0.2))))
plot(as.im(as.matrix(mostFollowed_byclust(other_info[,3], percentage = 0.2, W = owin((1,3),(1,140))))))
plot(
as.im(
as.matrix(
mostFollowed_byclust(other_info[,3], percentage = 0.2)
)
, W = owin(c(1,3), c(1:140)))
)
plot(
as.im(
as.matrix(
mostFollowed_byclust(other_info[,3], percentage = 0.2)
)
, W = owin(c(1,3), c(1,140)))
)
plot(
as.im(
as.matrix(
mostFollowed_byclust(other_info[,3], percentage = 0.2)
)
, W = owin(c(1,30), c(1,140)))
)
plot(
as.im(
as.matrix(
mostFollowed_byclust(other_info[,3], percentage = 0.2)
)
, W = owin(c(1,30), c(1,140))),
main = "Course frequency beetween three clusters")
mostFollowed_byclust(other_info[,3], percentage = 0.2)
plot(
as.im(
as.matrix(
mostFollowed_byclust(other_info[,3], percentage = 0.2)
)
, W = owin(c(1,90), c(1,140))),
main = "Course frequency beetween three clusters")
plot(
as.im(
as.matrix(
mostFollowed_byclust(other_info[,3], percentage = 0.2)
)
, W = owin( c(1,140),c(1,90))),
main = "Course frequency beetween three clusters")
plot(
as.im(
as.matrix(
mostFollowed_byclust(other_info[,3], percentage = 0.2)
)
, W = owin( c(1,140),c(1,30))),
main = "Course frequency beetween three clusters")
plot(
as.im(
as.matrix(
mostFollowed_byclust(other_info[,3], percentage = 0.2)
)
, W = owin( c(1,140),c(1,120))),
main = "Course frequency beetween three clusters")
plot(
as.im(
as.matrix(
mostFollowed_byclust(other_info[,3], percentage = 0.2)
)
, W = owin(c(1,90), c(1,140))),
main = "Course frequency beetween three clusters")
plot(
as.im(
as.matrix(
mostFollowed_byclust(other_info[,3], percentage = 0.2)
)
, W = owin(c(1,90), c(1,140))),
main = "Course Frequencies Beetween Clusters")
courses_mixtgroup = mostFollowed_byclust(other_info[,3], percentage = 0.7, verbose = FALSE)
courses_mixtgroup = mostFollowed_byclust(other_info[,3], percentage = 0.7, verbose = TRUE)
plot(as.im(courses_mixtgroup,
W = owin(c(1,90), c(1,140)),
main = "Courses Frequencies Beetween Clusters")
plot(as.im(courses_mixtgroup,
W = owin(c(1,90), c(1,140)),
main = "Courses Frequencies Beetween Clusters"))
plot(as.im(courses_mixtgroup,
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
plot(as.im(courses_mixtgroup,
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
plot(as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
?as.im
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140)),
step = 3),
main = "Courses Frequencies Beetween Clusters")
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140)),
step = 1),
main = "Courses Frequencies Beetween Clusters")
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140)),
step = 1:2),
main = "Courses Frequencies Beetween Clusters")
?as.im
plot(
as.im(courses_mixtgroup,
W = owin(c(1,90), c(1,140)),
drop = FALSE),
main = "Courses Frequencies Beetween Clusters")
plot(
as.im(courses_mixtgroup,
W = owin(c(1,90), c(1,140)),
drop = TRUE),
main = "Courses Frequencies Beetween Clusters")
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140)),
drop = TRUE),
main = "Courses Frequencies Beetween Clusters")
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140)),
dimyx = 256),
main = "Courses Frequencies Beetween Clusters")
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140)),
dimyx = 3),
main = "Courses Frequencies Beetween Clusters")
hist(courses_mixtgroup)
hist(courses_mixtgroup[,1])
hist(courses_mixtgroup[,2])
hist(courses_mixtgroup[,3])
courses_mixtgroup
hist(courses_mixtgroup[,3])
courses_mixtgroup
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
table(other_info[,1], other_info[,3])
laureati = read_excel("D:/Box Sync/#UNI/Materiale tesi/Analysis/ThesisAnalysis/laureati.xls", sheet = "recode 3") # import of the third recode
library(readxl)
laureati = read_excel("D:/Box Sync/#UNI/Materiale tesi/Analysis/ThesisAnalysis/laureati.xls", sheet = "recode 3") # import of the third recode
datafexam = data.frame(NULL) # initializing the dataframe
for(i in 1:nrow(laureati)){
mat = laureati[i, 1]
exam = laureati[i, 3]
datafexam[mat, exam] = 1
}
datafexam[is.na(datafexam)] = 0 # filling the NULLs
write.csv(datafexam, "Python/clusterdata2.csv", row.names = FALSE)
setwd("D:/Box Sync/#UNI/Materiale tesi/Analysis/ThesisAnalysis/Python")
library(PythonInR)
pyConnect() # connecting to python session
pyExecfile("model-based.py") # do not run
other_info["mixtgroup"] = pyGet("modelclust", simplify = FALSE) + 1
mixtgroup_3 = as.vector(other_info["mixtgroup"])
mixtprob = pyGet("clustprob", simplify = TRUE)
mixtprototypes = pyGet("prototype", simplify = TRUE)
pyExit()
mostFollowed_byclust(other_info[,3])
table(other_info[,1], other_info[,3])
cbind(courses_mixtgroup[,2:3], courses_mixtgroup[,2]+courses_mixtgroup[,3] < 0.2)
courses_mixtgroup = mostFollowed_byclust(other_info[,3], percentage = 0.7)
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
library(spatstat)
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
plot(as.im(rpoispp(100)), W = square(1000000))
library(spatstat)
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
library(spatstat)
library(spatstat)
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
table(other_info[,1], other_info[,3])
cbind(courses_mixtgroup[,2:3], courses_mixtgroup[,2]+courses_mixtgroup[,3] < 0.2)
cbind(courses_mixtgroup[,2:3], courses_mixtgroup[,2]+courses_mixtgroup[,3] < 0.2)
cbind(courses_mixtgroup[,2:3], courses_mixtgroup[,2]+courses_mixtgroup[,3] < 0.2)
cbind(courses_mixtgroup[,2:3], courses_mixtgroup[,2]+courses_mixtgroup[,3] < 0.2)
cbind(courses_mixtgroup[,2:3], courses_mixtgroup[,2]+courses_mixtgroup[,3] < 0.2)
cbind(courses_mixtgroup[,2:3], courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2)
courses_mixtgroup[,2:3]
courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3]
library(cluster)
daisy(courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3])
courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3]
apply(courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3], 1, sum)
apply(courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3], 1, difference)
apply(courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3], 1, sd)
plot(apply(courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3], 1, sd))
plot(apply(courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3], 1, sd), type = "h")
courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3]
hist(courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3])
plot(courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3])
multihist(courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3])
cbind(courses_mixtgroup[,2:3], courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2) # Most frequented courses in the two
courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3]
courses_mixtgroup[apply(courses_mixtgroup[,2:3],,sum) > 0.2, 2:3]
courses_mixtgroup[apply(courses_mixtgroup[,2:3],1,sum) > 0.2, 2:3]
clusterdataf = datafexam
courses_mixtgroup = mostFollowed_byclust(other_info[,3], percentage = 0.7)
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
table(other_info[,1], other_info[,3])
cbind(courses_mixtgroup[,2:3], courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2) # Most frequented courses in the two
courses_mixtgroup[apply(courses_mixtgroup[,2:3],1,sum) > 0.2, 2:3]
courses_mixtgroup[,2:3]
courses_mixtgroup[apply(courses_mixtgroup[,2:3],1,sum) > 0.3, 2:3]
mixtprototypes
most_frequented_byclust = courses_mixtgroup[apply(courses_mixtgroup[,2:3],1,sum) > 0.3, 2:3]
cbind(most_frequented_byclust, mixtprototypes[,2:3])
cbind(courses_mixtgroup, mixtprototypes[,2:3])
cbind(courses_mixtgroup[2:3], mixtprototypes[,2:3])
library(flexclust)
kmeansClusters = stepFlexclust(clusterdataf, k = 3, nrep = 10000, FUN = cclust, multicore = TRUE)
summary(kmeansClusters)
kcenters = kmeansClusters@centers
kcenters
daisy(kcenters, metric = "manhattan") # distances beetween the cluster centers
kcenters = kmeansClusters@centers
kgroup_3 = kmeansClusters@cluster
kgroup_3
summary(kmeansClusters)
cbind(courses_mixtgroup[2:3], mixtprototypes[,2:3], kcenters[2:3,])
kcenters[2:3,]
cbind(courses_mixtgroup[2:3], mixtprototypes[,2:3], t(kcenters[2:3,]))
rm(courses_mixtgroup)
courses_mixtgroup = mostFollowed_byclust(other_info[,3], percentage = 0.7)
courses_kmeagroup = mostFollowed_byclust(kgroup_3, percentage = 0.7)
courses_kmeagroup
courses_mixtgroup = mostFollowed_byclust(other_info[,3], percentage = 0.7) # exam frequentation in mixture-model clusters
courses_kmeagroup = mostFollowed_byclust(kgroup_3, percentage = 0.7) # in k-means clusters
courses_mixtgroup[2:3]
courses_kmeagroup[2:3]
cbind(courses_mixtgroup[2:3], courses_kmeagroup[2:3])
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[2:3]), 2)
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[3:2]), 2)
mostFollowed_byclust(other_info[,3], percentage = 0.7)
mostFollowed_byclust(kgroup_3, percentage = 0.7)
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[3:2]), 2)
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[3:2]), 2)
hist(kgroup_3)
hist(mixtgroup_3)
hist(numeric(mixtgroup_3))
hist(as.matrix(mixtgroup_3))
hist(kgroup_3)
hist(as.matrix(mixtgroup_3))
mixtgroup_3 = as.vector(other_info["mixtgroup"])
hist(kgroup_3)
hist(as.matrix(mixtgroup_3))
hist(kgroup_3)
hist(as.matrix(mixtgroup_3))
autoplot(kgroup_3)
?autoplot
??autoplot
library(ggfortify)
autoplot(kgroup_3)
autoplot(table(kgroup_3))
hist(kgroup_3)
hist(as.matrix(mixtgroup_3))
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[3:2]), 2)
mostFollowed_byclust(other_info[,3], percentage = 0.7)
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[3:2]), 2)
courses_mixtgroup = mostFollowed_byclust(other_info[,3], percentage = 0.7) # exam frequentation in mixture-model clusters
courses_kmeagroup = mostFollowed_byclust(kgroup_3, percentage = 0.7) # in k-means clusters
clusterdataf = datafexam # select the dataframe to use for clustering
distances = daisy(clusterdataf,
type = list(asymm = c(1:ncol(clusterdataf))), # threating the variables as asymmetric binaries
metric = "gower")
ComplClusters = hclust(distances, method = "complete")
WardClusters = hclust(distances, method = "ward.D") # threating the variables as numeric
plot(WardClusters, labels = other_info$immyear, which.plot = 2)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
kmeansClusters = stepFlexclust(clusterdataf, k = 3, nrep = 10000, FUN = cclust, multicore = TRUE)
library(flexclust)
kmeansClusters = stepFlexclust(clusterdataf, k = 3, nrep = 10000, FUN = cclust, multicore = TRUE)
summary(kmeansClusters)
kcenters = kmeansClusters@centers
daisy(kcenters, metric = "manhattan") # distances beetween the cluster centers
kgroup_3 = kmeansClusters@cluster
hist(kgroup_3)
courses_kmeagroup = mostFollowed_byclust(kgroup_3, percentage = 0.7) # in k-means clusters
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[1:2]), 2)
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[2:1]), 2)
plot(ComplClusters, labels = other_info$immyear, which.plot = 2)
plot(WardClusters, labels = other_info$immyear, which.plot = 2)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
hgroup_3 = cutree(WardClusters, k = 3)
hgroup_3
mostFollowed_byclust(hgroup_3)
WardClusters = agnes(distances, diss = TRUE, method = "ward")
library(cluster)
WardClusters = agnes(distances, diss = TRUE, method = "ward")
hgroup_3 = cutree(WardClusters, k = 3)
mostFollowed_byclust(hgroup_3)
plot(WardClusters, labels = other_info$immyear, which.plot = 2)
WardClusters = hclust(distances, method = "ward.D") # threating the variables as numeric
plot(WardClusters, labels = other_info$immyear, which.plot = 2)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
hgroup_3 = cutree(WardClusters, k = 3)
mostFollowed_byclust(hgroup_3)
courses_hgroup = mostFollowed_byclust(hgroup_3, percentage = 0.7) # in hierarchical clusters
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[2:1]), 2)
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[2:1], courses_hgroup[1:2]), 2)
comparison = cbind(courses_mixtgroup[2:3], courses_kmeagroup[2:1], courses_hgroup[1:2])
round(comparison, 2)
comparison = cbind(courses_mixtgroup[2:3], courses_kmeagroup[2:1], courses_hgroup[1:2])
round(comparison, 2)
writeClipboard(comparison)
write.csv(comparison, "comparison.csv")
