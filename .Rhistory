}
# probability based clustering
if("prob" %in% technique){
library(PythonInR)
cat("\nPerforming Bayes Bernoulli Mixture Model clustering. It might take a while depending on number of simulations...\n")
setwd("Python")
pyConnect()
pyExec("import pandas")
cat("\tTransferring variables to Python...\n")
pySet("data", value = binarydataf, usePandas = TRUE)
pySet("nclusters", value = nclust, usePandas = TRUE)
pySet("nsimulations", value = nsim, usePandas = TRUE)
cat("\tExecuting the script...")
pyExecfile("simpleModelbased.py") # running
mixtgroup = pyGet("modelclust", simplify = FALSE) + 1
mixtprob = pyGet("clustprob", simplify = TRUE)
mixtprototypes = pyGet("prototype", simplify = TRUE)
pyExit()
mixture_result = list(mixtgroup, mixtprob, mixtprototypes, names = "Group")
results["mixture"] = list(mixture_result)
}
#cluster.stats(distances, kmeans_result[[i]]@cluster)$avg
cat("\n")
return(results)
}
results = studyplan_finder(clusterdataf, technique = list("prob"), nclust = 2, nsim = 20)
results$mixture$names
results$mixture$``
results$mixture
studyplan_finder = function(binarydataf, technique, nclust, nsim = 1, return_class = TRUE){
library(flexclust)
library(cluster)
library(fpc)
library(hybridHclust)
if(class(binarydataf) != "data.frame") warning("Input should be a binary data frame.")
if(class(technique) != "list") stop("Should provide a list of valid clustering techniques. Please input a list of techniques.")
if(length(nclust) == 1) if(nclust == 0) stop("At least one cluster is needed to perform analysis.")
results = list()
cat("\nComputing distance matrix for binary variables...\n")
distances = daisy(binarydataf,
type = list(asymm = c(1:ncol(binarydataf))), # threating the variables as asymmetric binaries
metric = "gower")
# K - means
if("k-means" %in% technique){
cat("\nPerforming k-means clustering. It might take a while depending on number of simulations...\n")
kmeans_result = stepFlexclust(binarydataf, k = nclust, nrep = nsim, FUN = cclust, multicore = TRUE)
results["kmeans"] = kmeans_result
}
# K-medoids
if("k-medoids" %in% technique){
cat("\nPerforming k-medoids clustering...\n")
kmedoids_result = pamk(distances, krange = nclust, criterion = "asw", diss = TRUE)
results["kmedoids"] = kmedoids_result
}
# Ward method
if("ward" %in% technique){
cat("\nPerforming Ward hierarchical clustering...\n")
ward_result = hclust(distances, method = "ward.D")
print(class(ward_result))
results["ward"] = list(ward_result)
}
# Hybrid hierarchial method
if("hybrid" %in% technique){
cat("\nPerforming Hybrid hierarchical clustering...\n")
hybrid_result = hybridHclust(binarydataf)
results["hybrid"] = list(hybrid_result)
}
# probability based clustering
if("prob" %in% technique){
library(PythonInR)
cat("\nPerforming Bayes Bernoulli Mixture Model clustering. It might take a while depending on number of simulations...\n")
setwd("Python")
pyConnect()
pyExec("import pandas")
cat("\tTransferring variables to Python...\n")
pySet("data", value = binarydataf, usePandas = TRUE)
pySet("nclusters", value = nclust, usePandas = TRUE)
pySet("nsimulations", value = nsim, usePandas = TRUE)
cat("\tExecuting the script...")
pyExecfile("simpleModelbased.py") # running
mixtgroup = pyGet("modelclust", simplify = FALSE) + 1
mixtprob = pyGet("clustprob", simplify = TRUE)
mixtprototypes = pyGet("prototype", simplify = TRUE)
pyExit()
mixture_result = list(clusters = mixtgroup, clusterprob = mixtprob, prototypes = mixtprototypes)
results["mixture"] = list(mixture_result)
}
#cluster.stats(distances, kmeans_result[[i]]@cluster)$avg
cat("\n")
return(results)
}
studyplan_finder = function(binarydataf, technique, nclust, nsim = 1, return_class = TRUE){
library(flexclust)
library(cluster)
library(fpc)
library(hybridHclust)
if(class(binarydataf) != "data.frame") warning("Input should be a binary data frame.")
if(class(technique) != "list") stop("Should provide a list of valid clustering techniques. Please input a list of techniques.")
if(length(nclust) == 1) if(nclust == 0) stop("At least one cluster is needed to perform analysis.")
results = list()
cat("\nComputing distance matrix for binary variables...\n")
distances = daisy(binarydataf,
type = list(asymm = c(1:ncol(binarydataf))), # threating the variables as asymmetric binaries
metric = "gower")
# K - means
if("k-means" %in% technique){
cat("\nPerforming k-means clustering. It might take a while depending on number of simulations...\n")
kmeans_result = stepFlexclust(binarydataf, k = nclust, nrep = nsim, FUN = cclust, multicore = TRUE)
results["kmeans"] = kmeans_result
}
# K-medoids
if("k-medoids" %in% technique){
cat("\nPerforming k-medoids clustering...\n")
kmedoids_result = pamk(distances, krange = nclust, criterion = "asw", diss = TRUE)
results["kmedoids"] = kmedoids_result
}
# Ward method
if("ward" %in% technique){
cat("\nPerforming Ward hierarchical clustering...\n")
ward_result = hclust(distances, method = "ward.D")
print(class(ward_result))
results["ward"] = list(ward_result)
}
# Hybrid hierarchial method
if("hybrid" %in% technique){
cat("\nPerforming Hybrid hierarchical clustering...\n")
hybrid_result = hybridHclust(binarydataf)
results["hybrid"] = list(hybrid_result)
}
# probability based clustering
if("prob" %in% technique){
library(PythonInR)
cat("\nPerforming Bayes Bernoulli Mixture Model clustering. It might take a while depending on number of simulations...\n")
setwd("Python")
pyConnect()
pyExec("import pandas")
cat("\tTransferring variables to Python...\n")
pySet("data", value = binarydataf, usePandas = TRUE)
pySet("nclusters", value = nclust, usePandas = TRUE)
pySet("nsimulations", value = nsim, usePandas = TRUE)
cat("\tExecuting the script...")
pyExecfile("simpleModelbased.py") # running
mixtgroup = pyGet("modelclust", simplify = FALSE) + 1
mixtprob = pyGet("clustprob", simplify = TRUE)
mixtprototypes = pyGet("prototype", simplify = TRUE)
pyExit()
mixture_result = list(clusters = mixtgroup, clusterprob = mixtprob, prototypes = mixtprototypes)
results["mixture"] = list(mixture_result)
}
#cluster.stats(distances, kmeans_result[[i]]@cluster)$avg
cat("\n")
return(results)
}
results = studyplan_finder(clusterdataf, technique = list("prob"), nclust = 2, nsim = 20)
names(results)
results$mixture
results$mixture$prototypes
results$mixture$clusters
hist(results$mixture$clusters)
results = studyplan_finder(clusterdataf, technique = list("kmeans"), nclust = 2, nsim = 20)
results = studyplan_finder(clusterdataf, technique = list("kmeans", "ward"), nclust = 2, nsim = 20)
results = studyplan_finder(clusterdataf, technique = list("k-means", "ward"), nclust = 2, nsim = 20)
results = studyplan_finder(clusterdataf, technique = list("k-means", "ward"), nclust = 2, nsim = 100)
studyplan_finder = function(binarydataf, technique, nclust, nsim = 1, return_class = TRUE){
library(flexclust)
library(cluster)
library(fpc)
library(hybridHclust)
if(class(binarydataf) != "data.frame") warning("Input should be a binary data frame.")
if(class(technique) != "list") stop("Should provide a list of valid clustering techniques. Please input a list of techniques.")
if(length(nclust) == 1) if(nclust == 0) stop("At least one cluster is needed to perform analysis.")
results = list()
cat("\nComputing distance matrix for binary variables...\n")
distances = daisy(binarydataf,
type = list(asymm = c(1:ncol(binarydataf))), # threating the variables as asymmetric binaries
metric = "gower")
# K - means
if("k-means" %in% technique){
cat("\nPerforming k-means clustering. It might take a while depending on number of simulations...\n")
kmeans_result = stepFlexclust(binarydataf, k = nclust, nrep = nsim, FUN = cclust, multicore = TRUE, verbose = FALSE)
results["kmeans"] = list(kmeans_result)
}
# K-medoids
if("k-medoids" %in% technique){
cat("\nPerforming k-medoids clustering...\n")
kmedoids_result = pamk(distances, krange = nclust, criterion = "asw", diss = TRUE)
results["kmedoids"] = kmedoids_result
}
# Ward method
if("ward" %in% technique){
cat("\nPerforming Ward hierarchical clustering...\n")
ward_result = hclust(distances, method = "ward.D")
results["ward"] = list(ward_result)
}
# Hybrid hierarchial method
if("hybrid" %in% technique){
cat("\nPerforming Hybrid hierarchical clustering...\n")
hybrid_result = hybridHclust(binarydataf)
results["hybrid"] = list(hybrid_result)
}
# probability based clustering
if("prob" %in% technique){
library(PythonInR)
cat("\nPerforming Bayes Bernoulli Mixture Model clustering. It might take a while depending on number of simulations...\n")
setwd("Python")
pyConnect()
pyExec("import pandas")
cat("\tTransferring variables to Python...\n")
pySet("data", value = binarydataf, usePandas = TRUE)
pySet("nclusters", value = nclust, usePandas = TRUE)
pySet("nsimulations", value = nsim, usePandas = TRUE)
cat("\tExecuting the script...")
pyExecfile("simpleModelbased.py") # running
mixtgroup = pyGet("modelclust", simplify = FALSE) + 1
mixtprob = pyGet("clustprob", simplify = TRUE)
mixtprototypes = pyGet("prototype", simplify = TRUE)
pyExit()
mixture_result = list(clusters = mixtgroup, clusterprob = mixtprob, prototypes = mixtprototypes)
results["mixture"] = list(mixture_result)
}
#cluster.stats(distances, kmeans_result[[i]]@cluster)$avg
cat("\n")
return(results)
}
results = studyplan_finder(clusterdataf, technique = list("k-means", "ward"), nclust = 2, nsim = 100)
results$kmeans@centers
results$kmeans@clusters
results$kmeans@cluster
source("R/external_functions.R")
getwd()
setwd("D:/Box Sync/#UNI/Materiale tesi/Analysis/ThesisAnalysis")
source("R/external_functions.R")
source("R/external_functions.R")
source("R/external_functions.R")
results = studyplan_finder(clusterdataf, technique = list("k-means", "ward"), nclust = 2, nsim = 100)
source("R/external_functions.R")
results = studyplan_finder(
clusterdataf,
technique = list("k-means", "k-medoids", "ward", "prob"),
nclust = 2,
nsim = 1000
)
results$mixture$clusters
source("R/external_functions.R")
names(results)
wd
getwd()
library(readxl)
laureati = read_excel("data/laureati.xls", sheet = "recode 3") # import of the third recode
datafexam = data.frame(NULL) # initializing the dataframe
for(i in 1:nrow(laureati)){
mat = laureati[i, 1]
exam = laureati[i, 3]
datafexam[mat, exam] = 1
}
datafexam[is.na(datafexam)] = 0 # filling the NULLs
datafexam = data.frame(NULL) # initializing the dataframe
for(i in 1:nrow(laureati)){
mat = laureati[i, 1]
exam = laureati[i, 3]
datafexam[mat, exam] = 1
}
datafexam[is.na(datafexam)] = 0 # filling the NULLs
datafexam = data.frame(NULL) # initializing the dataframe
for(i in 1:nrow(laureati)){
mat = laureati[i, 1]
exam = laureati[i, 3]
datafexam[mat, exam] = 1
}
laureati
class(laureati)
laureati$matricola
as.data.frame(laureati)
laureati = as.data.frame(laureati)
datafexam = data.frame(NULL) # initializing the dataframe
for(i in 1:nrow(laureati)){
mat = laureati[i, 1]
exam = laureati[i, 3]
datafexam[mat, exam] = 1
}
datafexam[is.na(datafexam)] = 0 # filling the NULLs
image(as.matrix(datafexam), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
datafexam_ordered[(datafexam_ordered == 1 | datafexam_ordered == 0) == FALSE]
source("R/external_functions.R")
datafexam = convert_dataframe(laureati)
image(as.matrix(datafexam), xlab = "Matricole", ylab = "Esami", col = c("white", "red")) # check of the dataframe
names(results)
results0 = studyplan_finder(
datafexam,
technique = list("k-means", "k-medoids", "ward", "prob"),
nclust = 2:8, # results from 2 to 8 clusters
nsim = 500)  # results based on 1000 simulation per method
results0
which.max(2:8)
max(2:8)
class(max(2:8))
max(9)
max(12)
results0 = studyplan_finder(
datafexam,
technique = list("k-means", "k-medoids", "ward", "prob"),
nclust = 2:8, # results from 2 to 8 clusters
nsim = 500)  # results based on 1000 simulation per method
results0 = studyplan_finder(
datafexam,
technique = list("k-means", "k-medoids", "ward", "prob"),
nclust = 2:8, # results from 2 to 8 clusters
nsim = 500)  # results based on 1000 simulation per method
getwd()
source("R/external_functions.R")
setwd("D:/Box Sync/#UNI/Materiale tesi/Analysis/ThesisAnalysis")
source("R/external_functions.R")
results0 = studyplan_finder(
datafexam,
technique = list("k-means", "k-medoids", "ward", "prob"),
nclust = 2:8, # results from 2 to 8 clusters
nsim = 500)  # results based on 1000 simulation per method
hist(results0$kmeans@models$`2`)
results0$kmeans@models$`2`
results0$kmeans[[2]]
hist(results0$kmeans[[2]])
hist(results0$kmeans[[2]]@cluster)
hist(results0$mixture$clusters)
plot(results0$ward)
plot(results0$ward, labels = other_info[1])
other_info[1]
plot(WardClusters, labels = other_info$immyear, which.plot = 2)
plot(results0$ward, labels = other_info$immyear)
plot(results0$ward, labels = other_info$immyear)
identify(results0$ward, mostFollowed) # click over a branch to see the most followed courses!
clusterdataf = datafexam
identify(results0$ward, mostFollowed) # click over a branch to see the most followed courses!
setwd("D:/Box Sync/#UNI/Materiale tesi/Analysis/ThesisAnalysis")
setwd("D:/Box Sync/#UNI/Materiale tesi/Analysis/ThesisAnalysis")
results = studyplan_finder(
datafexam,
technique = list("k-means", "k-medoids", "ward", "prob"),
nclust = 3, # results just for 3 clusters
nsim = 5000)  # results based on 5000 simulation per method
source("R/external_functions.R")
rm(datafexam_ordered)
results = studyplan_finder(
datafexam,
technique = list("k-means", "k-medoids", "ward", "prob"),
nclust = 3, # results just for 3 clusters
nsim = 5000)  # results based on 5000 simulation per method
results0$kmeans
plot(results0$kmeans)
hist(results0$kmeans)
hist(results0$mixture$clusters)
results$mixture
hist(results$mixture$clusters)
results$mixture$clusters
table(results$mixture$clusters)
table(mixtgroup_3)
table(results$kmeans$clusters)
table(results$kmeans@clusters)
results$kmeans@clusters
table(results$kmeans@cluster)
plot(results$ward, labels = other_info$immyear)
clustergroup =  data.frame(row.names = row.names(datafexam))
clustergroup[,"kmeans"] = results$kmeans@cluster # those are from the k-means
clustergroup[,"mixture"] = results$mixture$clusters # those are the clusters obtained from the mixture model
clustergroup[,"ward"] = cutree(results$ward, k = 3)
results$kmedoids
results$kmedoids$cluster
results$kmedoids$clusters
results$kmedoids$clustering
results$kmedoids$clustering
results$kmedoids[2]
results$kmedoids[3]
results$kmedoids[4]
results$kmedoids[5]
results$kmedoids[1]
results$kmedoids[2]
results$kmedoids[[2]]
results$kmedoids[[3]]
results$kmedoids[[4]]
results$kmedoids[[1]]
results$kmedoids[[1]]$clustering
clustergroup[,"kmedoids"] = results$kmedoids[[1]]$clustering
clustergroup
hist(clustergroup)
hist(clustergroup[1])
hist(clustergroup[2])
hist(clustergroup[,3])
hist(clustergroup[,2])
hist(clustergroup$kmeans)
names(clustergroup)
for(i in names(clustergroup)){
hist(clustergroup$i)
}
hist(clustergroup$kmeans)
hist(clustergroup$kmedoids)
hist(clustergroup$"kmedoids")
hist(clustergroup$mixture)
for(i in names(clustergroup)){
cat(i)
}
for(i in names(clustergroup)){
hist(clustergroup$i)
}
for(i in names(clustergroup)){
table(clustergroup$i)
}
hist(table(clustergroup$kmeans))
for(i in names(clustergroup)){
table(clustergroup[,i])
}
for(i in names(clustergroup)){
hist(clustergroup[,i])
}
par(mfrow = c(2,2))
for(i in names(clustergroup)){
hist(clustergroup[,i])
}
par(mfrow = c(2,2))
for(i in names(clustergroup)){
hist(clustergroup[,i], main = i)
}
for(i in names(clustergroup)){
exam_frequencies$i = mostFollowed_byclust(clustergroup = clustergroup[,i], X = datafexam, percentage = 0.7, graph = F)
}
exam_frequencies = list()
for(i in names(clustergroup)){
exam_frequencies$i = mostFollowed_byclust(clustergroup = clustergroup[,i], X = datafexam, percentage = 0.7, graph = F)
}
for(i in names(clustergroup)){
cat("\nInside cluster exam frequencied for", i, "clustering methods\n")
exam_frequencies$i = mostFollowed_byclust(clustergroup = clustergroup[,i], X = datafexam, percentage = 0.7, graph = F)
}
comparison = cbind(exam_frequencies$ward[2:3], courses_kmeagroup[2:1], courses_hgroup[1:2], courses_kmedgroup[1:2])
exam_frequencies
for(i in names(clustergroup)){
cat("\nInside cluster exam frequencied for", i, "clustering methods\n")
exam_frequencies[[i]] = mostFollowed_byclust(clustergroup = clustergroup[,i], X = datafexam, percentage = 0.6, graph = F)
}
exam_frequencies
comparison = cbind(exam_frequencies$ward[2:3], exam_frequencies$ward[2:1], exam_frequencies$ward[1:2], exam_frequencies$ward[1:2])
round(comparison)
round(comparison, 2)
comparison = cbind(exam_frequencies$ward[1:2], exam_frequencies$kmeans[2:1], exam_frequencies$kmedoids[1:2], exam_frequencies$mixture[1:2])
round(comparison, 2)
par(mfrow = c(2,2))
for(i in names(clustergroup)){
hist(clustergroup[,i], main = i)
}
par(mfrow = c(1,1))
image(round(t(results$kmeans@xcent)), axes = FALSE, main = "K-means Centroids")
results$kmeans@xcent
image(round(t(results$kmeans@centres)), axes = FALSE, main = "K-means Centroids")
results$kmeans@centers
par(mfrow = c(3,1))
image(round(t(results$kmeans@centers)), axes = FALSE, main = "K-means Centroids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(results$mixture$prototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(results$mixture$prototypes, axes = FALSE, main = "Mixture-Model Prototypes")
results$mixture$prototypes
image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(round(t(results$kmeans@centers)), axes = FALSE, main = "K-means Centroids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[results$kmedoids$medoids,]), axes = FALSE, main = "K-medoids Medoids")
results$kmedoids$medoids
results$kmedoids
results$kmedoids[[1]]$medoids
image(t(clusterdataf[results$kmedoids[[1]]$medoids,]), axes = FALSE, main = "K-medoids Medoids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
par(mfrow = c(3,1))
image(round(t(results$kmeans@centers)), axes = FALSE, main = "K-means Centroids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[results$kmedoids[[1]]$medoids,]), axes = FALSE, main = "K-medoids Medoids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[kmedoidsClusters$medoids,]), axes = FALSE, main = "K-medoids Medoids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
table(other_info[,1], clustergroup[1])
table(other_info[,1], clustergroup[2])
table(other_info[,1], clustergroup[,2])
table(other_info[,1], clustergroup[,3])
table(other_info[,1], clustergroup[,4])
table(other_info[,1], clustergroup[,3])
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
library(spatstat)
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
plot(
as.im(as.matrix(exam_frequencies$mixture),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
abline(v = c(30.5, 60.5), col = "white", lwd = 2)
most_frequented_byclust = exam_frequencies$mixture[apply(courses_mixtgroup, 1, sum) > 0.3,]
most_frequented_byclust
most_frequented_byclust
most_frequented_byclust = exam_frequencies$mixture[apply(exam_frequencies$mixture, 1, sum) > 0.3,]
most_frequented_byclust
