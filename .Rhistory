!is.na(carriere$`Data laurea`[i])
for(i in 2:nrow(laureati)){
if (!is.na(carriere$`Data laurea`[i])){ # if the student is graduated
mat = carriere[i, 1]
cod = carriere[i, 2]
datafcod[mat, cod] = 1
}
}
for(i in 2:nrow(laureati)){
if (!is.na(carriere$`Data laurea`[i])){ # if the student is graduated
mat = carriere[i, 1]
cod = carriere[i, 2]
datafcod[mat, cod] = 1
}
}
for(i in 1:nrow(laureati)){
if (!is.na(carriere$`Data laurea`[i])){ # if the student is graduated
mat = carriere[i, 1]
cod = carriere[i, 2]
datafcod[mat, cod] = 1
}
}
View(datafcod)
par(mfrow = c(1,2))
image((as.matrix(datafcod)), col = "red") # plotting of the data matrices
image((as.matrix(datafexam)), col = "red")
for(i in 1:nrow(laureati)){
#if (!is.na(carriere$`Data laurea`[i])){ # if the student is graduated
mat = carriere[i, 1]
cod = carriere[i, 2]
datafcod[mat, cod] = 1
#}
}
for(i in 1:nrow(laureati)){
#if (!is.na(carriere$`Data laurea`[i])){ # if the student is graduated
mat = carriere[i, 1]
cod = carriere[i, 2]
datafcod[mat, cod] = 1
#}
}
for(i in 1:nrow(laureati)){
if (is.na(carriere$`Data laurea`[i])){ # if the student is graduated
mat = carriere[i, 1]
cod = carriere[i, 2]
datafcod[mat, cod] = 1
}
}
View(laureati)
View(datafexam_ordered)
datafexam_ordered == 0
is.na(datafexam_ordered)
datafexam_ordered[is.na(datafexam_ordered)]
datafexam_ordered[is.na(datafexam_ordered)] == 0
datafexam_ordered[is.na(datafexam_ordered)] = 0
image(as.matrix(datafexam_ordered), xlab = "Matricole", ylab = "Esami", col = "red")
image(as.matrix(datafexam_ordered), xlab = "Matricole", ylab = "Esami", col = "red")
image(as.matrix(datafexam_ordered), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
?image
image(as.matrix(datafexam_ordered)[,1:200], as.matrix(datafexam_ordered)[1:322,], xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
image(as.matrix(datafexam_ordered), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
image(as.matrix(datafexam_ordered), xlab = "Matricole", xlim = 322, ylab = "Esami", col = c("white", "red"))
image(as.matrix(datafexam_ordered), xlab = "Matricole", xlim = 322, ylim = 322, ylab = "Esami", col = c("white", "red"))
image(as.matrix(datafexam_ordered), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
View(datafexam_ordered)
View(datafexam_ordered)
?readr
library(cluster)
?distances
?daisy
distances = daisy(datafexam_ordered, type = list(asymm)  ,metric = "gower")
distances = daisy(datafexam_ordered, type = list(asymm = c(1:ncol(datafexam_ordered)))  ,metric = "gower")
distances
str(datafexam_ordered)
str(as.data.frame.logical(datafexam_ordered))
?hclust
completelin = hclust(distances, method = "complete")
plclust(completelin, main = "Complete linkage")
rm(completelin)
clustered = hclust(distances, method = "single")
plclust(clusteres, main = "Complete linkage")
clustered = hclust(distances, method = "single")
plclust(clustered, main = "Single linkage")
clustered = hclust(distances, method = "average")
plclust(clustered, main = "Average linkage")
clustered = hclust(distances, method = "centroid")
plclust(clustered, main = "Average linkage")
?daisy
distances = daisy(datafexam_ordered,
type = list(asymm = c(1:ncol(datafexam_ordered))),
metric = "gower")
distances = daisy(datafexam_ordered,
#type = list(asymm = c(1:ncol(datafexam_ordered))),
metric = "gower")
clustered = hclust(distances, method = "centroid")
plclust(clustered, main = "Average linkage")
distances = daisy(datafexam_ordered,
type = list(asymm = c(1:ncol(datafexam_ordered))),
metric = "gower")
clustered = hclust(distances, method = "centroid")
plclust(clustered, main = "Average linkage")
distances = daisy(datafexam_ordered,
#type = list(asymm = c(1:ncol(datafexam_ordered))),
metric = "gower")
clustered = hclust(distances, method = "centroid")
plclust(clustered, main = "Average linkage")
distances = daisy(datafexam_ordered,
type = list(asymm = c(1:ncol(datafexam_ordered))),
metric = "gower")
clustered = hclust(distances, method = "centroid")
plclust(clustered, main = "Average linkage")
clustered = hclust(distances, method = "average")
plclust(clustered, main = "Average linkage")
plclust(hclust(distances, method = "average"))
help("Deprecated")
plot(hclust(distances, method = "average"))
plot(hclust(distances, method = "complete"))
par(mfrow = c(2,1))
plot(hclust(distances, method = "complete"))
plot(hclust(distances, method = "average"))
clustered
plot(hclust(distances, method = "complete"))
hclust(distances, method = "complete")
plot(hclust(distances, method = "complete"))
plot(hclust(distances, method = "complete"), labels = NA)
plot(hclust(distances, method = "complete"), labels = FALSE)
plot(hclust(distances, method = "complete"), labels = T)
plot(hclust(distances, method = "complete"), labels = TRUE)
plot(hclust(distances, method = "complete"))
datafexam_ordered["0000716399", ]
datafexam_ordered["0000716399", is.na(datafexam_ordered)]
datafexam_ordered["0000716399", is.na(datafexam_ordered)]
datafexam_ordered["0000716399", ]
datafexam_ordered["0000716399", datafexam_ordered["0000716399", ] == 1]
datafexam_ordered["0000716399", datafexam_ordered[,1:200 ] == 1]
datafexam_ordered["0000716399", ]
datafexam_ordered["0000716399", ] == NA
datafexam_ordered["0000716399", ] == 1
image(datafexam_ordered["0000716399", ])
image(as.matrix(datafexam_ordered["0000716399", ]))
view(datafexam_ordered["0000716399", ])
View()
View(datafexam_ordered["0000716399", ])
plot(hclust(distances, method = "complete"))
View(datafexam_ordered["00007116399", ])
datafexam_ordered["00007116399", ]
View(datafexam_ordered["00007116399", 1:200])
datafexam_ordered["00007116399", 1:200]
hclust(distances, method = "complete")$labels
View(datafexam_ordered["0000711639", 1:200])
datafexam_ordered["0000711639", 1:200] == 1
datafexam_ordered["0000711639", ] == 1
datafexam_ordered[,datafexam_ordered["0000711639", ] == 1]
datafexam_ordered["0000711639", datafexam_ordered[, ] == 1]
datafexam_ordered["0000711639", datafexam_ordered[] == 1]
datafexam_ordered["0000711639", datafexam_ordered["0000711639", ] == 1]
datafexam_ordered["0000366522", datafexam_ordered["0000366522", ] == 1]
hclust(distances, method = "complete")$order
?hclust
?cluster
??cluster
ComplClusters = hclust(distances, method = "complete")
identify.plot(ComplClusters)
identify(ComplClusters)
windows()
identify(ComplClusters)
windows()
identify(ComplClusters)
plot(ComplClusters)
windows()
plot(ComplClusters)
identify(ComplClusters)
?identify
?identify.hclust
identify(ComplClusters,  function(k) barplot(table(datafexam_ordered[k,5]))
?identify.hclust
??cluster
ComplClusters = hclust(distances, method = "complete")
windows()
plot(ComplClusters)
identify(ComplClusters,  function(k) barplot(table(datafexam_ordered[k,5]))
)
ComplClusters = hclust(distances, method = "complete")
windows()
plot(ComplClusters)
identify(ComplClusters,  function(k) barplot(table(datafexam_ordered[k,5]))
)
identify(ComplClusters,  function(k) barplot(table(datafexam_ordered[k,5], DEV.FUN = nD)))
windows()
plot(ComplClusters)
identify(ComplClusters,  function(k) barplot(table(datafexam_ordered[k,5], DEV.FUN = nD)))
dev.new()
nD <- dev.cur()
dev.set(dev.prev())
plot(ComplClusters)
identify(ComplClusters,  function(k) barplot(table(datafexam_ordered[k,c(1:200)], DEV.FUN = nD)))
identify(ComplClusters,  function(k) barplot(table(datafexam_ordered[k,"BUSINESS INTELLIGENCE"], DEV.FUN = nD)))
identify(ComplClusters,  function(k) barplot(table(datafexam_ordered[k,14], DEV.FUN = nD)))
identify(ComplClusters,  function(k) barplot(table(datafexam_ordered[k,1], DEV.FUN = nD)))
hist(datafexam_ordered)
hist(table(datafexam_ordered))
table(datafexam_ordered)
sum(datafexam_ordered[,1])
datafexam_ordered[,1]
sum(datafexam_ordered[,4])
sum(datafexam_ordered[,7])
sum(datafexam_ordered[,12])
sum(datafexam_ordered[,18])
sum(datafexam_ordered[,25])
sum(datafexam_ordered[,167])
apply(datafexam_ordered, 2, sum)
apply(datafexam_ordered, 2, sum) > 20
names(datafexam_ordered)
names(datafexam_ordered)[apply(datafexam_ordered, 2, sum) > 20]
names(datafexam_ordered)[apply(datafexam_ordered, 2, sum) > 100]
names(datafexam_ordered)[apply(datafexam_ordered, 2, sum) > 320]
names(datafexam_ordered)[apply(datafexam_ordered, 2, sum) > 321]
names(datafexam_ordered)[apply(datafexam_ordered, 2, sum) == 322]
names(datafexam_ordered)[apply(datafexam_ordered, 2, sum) == 20]
names(datafexam_ordered)[apply(datafexam_ordered, 2, sum) => 20]
names(datafexam_ordered)[apply(datafexam_ordered, 2, sum) >= 20]
names(datafexam_ordered)[apply(datafexam_ordered[,], 2, sum) >= 20]
names(datafexam_ordered)[apply(datafexam_ordered[1:100,], 2, sum) >= 20]
identify(ComplClusters,  function(k) names(datafexam_ordered)[apply(datafexam_ordered[k,], 2, sum) >= 20]))
function(k) names(datafexam_ordered)[apply(datafexam_ordered[k,], 2, sum) >= 20]
mostFollowed = function(k) names(datafexam_ordered)[apply(datafexam_ordered[k,], 2, sum) >= 20]
mostFollowed(1:200)
mostFollowed(1)
dev.new()
plot(ComplClusters)
identify(ComplClusters,  FUN = mostFollowed, DEV.FUN = nD)
identify(ComplClusters,  FUN = mostFollowed)
mostFollowed = function(k) return(names(datafexam_ordered)[apply(datafexam_ordered[k,], 2, sum) >= 20])
dev.new()
plot(ComplClusters)
identify(ComplClusters,  FUN = mostFollowed)
identify(ComplClusters,  FUN = mostFollowed)
dev.new()
plot(ComplClusters)
identify(ComplClusters,  FUN = mostFollowed)
identify(ComplClusters,  FUN = mostFollowed())
dev.new()
plot(ComplClusters)
identify(ComplClusters,  FUN = mostFollowed())
dev.new()
plot(ComplClusters)
identify(ComplClusters, mostFollowed())
mostFollowed(c(12:30, 78))
mostFollowed = function(k) names(datafexam_ordered)[apply(datafexam_ordered[k,], 2, sum) >= 20]
mostFollowed(c(12:30, 78))
identify(ComplClusters, function(k) names(datafexam_ordered)[apply(datafexam_ordered[k,], 2, sum) >= 20]))
identify(ComplClusters, function(k) names(datafexam_ordered)[apply(datafexam_ordered[k,], 2, sum) >= 20]) )
identify(ComplClusters, function(k) names(datafexam_ordered)[apply(datafexam_ordered[k,], 2, sum) >= 20]), )
identify(ComplClusters, mostFollowed())
identify(ComplClusters, FUN = function(k) return(k)))
identify(ComplClusters, FUN = function(k) return(k)), )
identify(ComplClusters, FUN = function(k) return(k) )
dev.new()
plot(ComplClusters)
identify(ComplClusters, FUN = function(k) return(k) )
identify(ComplClusters, FUN = function(k) print(k) )
mostFollowed = function(k) print(names(datafexam_ordered)[apply(datafexam_ordered[k,], 2, sum) >= 20])
mostFollowed(1:200)
# Identifying clusters obtained with complete
dev.new()
plot(ComplClusters)
identify(ComplClusters, FUN = mostFollowed() )
identify(ComplClusters, mostFollowed())
mostFollowed = function(k) print(names(datafexam_ordered)[apply(datafexam_ordered[k,], 2, sum) >= 30])
dev.new()
plot(ComplClusters)
identify(ComplClusters, mostFollowed())
dev.new()
plot(ComplClusters)
identify(ComplClusters, mostFollowed)
plot(ComplClusters)
identify(ComplClusters, mostFollowed)
names(datafexam_ordered)[apply(datafexam_ordered[k,], 2, mean)
# Plotting an interactive deindogram to see the courses
plot(ComplClusters)
identify(ComplClusters, mostFollowed)
names(datafexam_ordered)[apply(datafexam_ordered[k,], 2, mean)
# Plotting an interactive deindogram to see the courses
plot(ComplClusters)
identify(ComplClusters, mostFollowed)
names(datafexam_ordered)[apply(datafexam_ordered[k,], 2, mean)
)
names(datafexam_ordered)[apply(datafexam_ordered, 2, mean)]
names(datafexam_ordered)[apply(datafexam_ordered, 2, mean) >= 30]
apply(datafexam_ordered, 2, mean)
names(datafexam_ordered)[apply(datafexam_ordered, 2, mean) >= 0.8]
names(datafexam_ordered)[apply(datafexam_ordered, 2, mean) >= 0.99]
names(datafexam_ordered)[apply(datafexam_ordered, 2, mean) >= 0.8]
mostFollowed = function(k) print(names(datafexam_ordered)[apply(datafexam_ordered, 2, mean) >= 0.8])
mostFollowed(1:100)
mostFollowed(1:200)
apply(datafexam_ordered, 2, mean) >= percentage
mostFollowed = function(k, percentage = 0.8){
is_popular = apply(datafexam_ordered, 2, mean) >= percentage
course_names = names(datafexam_ordered)[is_popular]
print(coursenames)
}
plot(ComplClusters)
identify(ComplClusters, mostFollowed)
mostFollowed = function(k, percentage = 0.8){
is_popular = apply(datafexam_ordered, 2, mean) >= percentage
course_names = names(datafexam_ordered)[is_popular]
print(course_names)
}
plot(ComplClusters)
identify(ComplClusters, mostFollowed)
mostFollowed = function(k, percentage = 0.8){
is_popular = apply(datafexam_ordered, 2, mean) >= percentage
course_names = names(datafexam_ordered[k, ])[is_popular]
print(course_names)
}
mostFollowed = function(k, percentage = 0.8){
is_popular = apply(datafexam_ordered, 2, mean) >= percentage
course_names = names(datafexam_ordered[k, ])[is_popular]
print(course_names)
}
plot(ComplClusters)
identify(ComplClusters, mostFollowed)
mostFollowed = function(k){
is_popular = apply(datafexam_ordered, 2, mean) >= 0.8
course_names = names(datafexam_ordered[k, ])[is_popular]
print(course_names)
}
mostFollowed = function(k){
is_popular = apply(datafexam_ordered[k, ], 2, mean) >= 0.8
course_names = names(datafexam_ordered)[is_popular]
print(course_names)
}
mostFollowed = function(k){
is_popular = apply(datafexam_ordered[k, ], 2, mean) >= 0.8
course_names = names(datafexam_ordered)[is_popular]
print(course_names)
}
plot(ComplClusters)
identify(ComplClusters, mostFollowed)
mostFollowed = function(k, percentage = 0.8){
is_popular = apply(datafexam_ordered[k, ], 2, mean) >= percentage
course_names = names(datafexam_ordered)[is_popular]
print(course_names)
}
mostFollowed = function(k, percentage = 0.8){
is_popular = apply(datafexam_ordered[k, ], 2, mean) >= percentage
course_names = names(datafexam_ordered)[is_popular]
print(course_names)
}
# Plotting an interactive deindogram to see the courses
plot(ComplClusters)
identify(ComplClusters, mostFollowed)
"ciao" + "ok"
"ciao"*10
rep("ciao", 10)
mostFollowed = function(k, percentage = 0.8){
is_popular = apply(datafexam_ordered[k, ], 2, mean) >= percentage # seeing which courses are more frequent
course_names = names(datafexam_ordered)[is_popular] # returning their names
print(course_names)
print("\n__________________________________________________\n")
}
plot(ComplClusters)
identify(ComplClusters, mostFollowed)
mostFollowed = function(k, percentage = 0.8){
is_popular = apply(datafexam_ordered[k, ], 2, mean) >= percentage # seeing which courses are more frequent
course_names = names(datafexam_ordered)[is_popular] # returning their names
print(course_names)
cat("__________________________________________________")
}
mostFollowed = function(k, percentage = 0.8){
is_popular = apply(datafexam_ordered[k, ], 2, mean) >= percentage # seeing which courses are more frequent
course_names = names(datafexam_ordered)[is_popular] # returning their names
print(course_names)
cat("__________________________________________________")
}
plot(ComplClusters)
identify(ComplClusters, mostFollowed)
mostFollowed = function(k, percentage = 0.8){
is_popular = apply(datafexam_ordered[k, ], 2, mean) >= percentage # seeing which courses are more frequent
course_names = names(datafexam_ordered)[is_popular] # returning their names
print(course_names)
cat("__________________________________________________________________________")
}
plot(ComplClusters, labels = F)
identify(ComplClusters, mostFollowed)
image(as.matrix(datafexam_ordered), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
plot(ComplClusters, labels = F)
identify(ComplClusters, mostFollowed)
plot(ComplClusters, labels = F)
identify(ComplClusters, mostFollowed(, percentage = 0.6))
mostFollowed = function(k, percentage = 0.8){
is_popular = apply(datafexam_ordered[k, ], 2, mean) <= percentage # seeing which courses are more frequent
course_names = names(datafexam_ordered)[is_popular] # returning their names
print(course_names)
cat("____________________________________________________________________")
}
plot(ComplClusters, labels = F)
identify(ComplClusters, mostFollowed)
mostFollowed = function(k, percentage = 0.8){
is_popular = apply(datafexam_ordered[k, ], 2, mean) >= percentage &  apply(datafexam_ordered[k, ], 2, mean) <= 0.3 # seeing which courses are more frequent
course_names = names(datafexam_ordered)[is_popular] # returning their names
print(course_names)
cat("____________________________________________________________________")
}
plot(ComplClusters, labels = F)
identify(ComplClusters, mostFollowed)
mostFollowed = function(k, percentage = 0.6){
is_popular = apply(datafexam_ordered[k, ], 2, mean) >= percentage # seeing which courses are more frequent
course_names = names(datafexam_ordered)[is_popular] # returning their names
print(course_names)
cat("____________________________________________________________________")
}
plot(ComplClusters, labels = F)
identify(ComplClusters, mostFollowed)
mostFollowed = function(k, percentage = 0.6){
is_popular = apply(datafexam_ordered[k, ], 2, mean) >= percentage # seeing which courses are more frequent
course_names = names(datafexam_ordered)[is_popular] # returning their names
print(course_names)
cat("____________________________________________________________________")
}
# Plotting an interactive deindogram to see the courses
plot(ComplClusters, labels = F)
identify(ComplClusters, mostFollowed)
k = 1:200
apply(datafexam_ordered[k, ], 2, mean)
mostFollowed = function(k, percentage = 0.6){
course_freq = apply(datafexam_ordered[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 0.99) # seeing which courses are more frequent
course_names = names(datafexam_ordered)[is_popular] # returning their names
print(course_names)
cat("____________________________________________________________________")
}
plot(ComplClusters, labels = F)
identify(ComplClusters, mostFollowed)
mostFollowed = function(k, percentage = 0.6){
course_freq = apply(datafexam_ordered[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 0.99) # seeing which courses are more frequent
course_names = names(datafexam_ordered)[is_popular] # returning their names
popular_freq = course_freq[is_popular]
print(popular_freq)
cat("____________________________________________________________________\n")
}
plot(ComplClusters, labels = F)
identify(ComplClusters, mostFollowed)
mostFollowed = function(k, percentage = 0.6){
course_freq = apply(datafexam_ordered[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 0.99) # seeing which courses are more frequent
print(order(course_freq[is_popular]))
cat("____________________________________________________________________\n")
}
plot(ComplClusters, labels = F)
identify(ComplClusters, mostFollowed)
mostFollowed = function(k, percentage = 0.6){
course_freq = apply(datafexam_ordered[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 0.99) # seeing which courses are more frequent
print(course_freq(order(course_freq[is_popular])))
cat("____________________________________________________________________\n")
}
plot(ComplClusters, labels = F)
identify(ComplClusters, mostFollowed)
mostFollowed = function(k, percentage = 0.6){
course_freq = apply(datafexam_ordered[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 0.99) # seeing which courses are more frequent
print(course_freq[order(course_freq[is_popular])])
cat("____________________________________________________________________\n")
}
plot(ComplClusters, labels = F)
identify(ComplClusters, mostFollowed)
mostFollowed = function(k, percentage = 0.6){
course_freq = apply(datafexam_ordered[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 0.99) # seeing which courses are more frequent
print(course_freq[is_popular])
cat("____________________________________________________________________\n")
}
plot(ComplClusters, labels = F)
identify(ComplClusters, mostFollowed)
mostFollowed = function(k, percentage = 0.6){
course_freq = apply(datafexam_ordered[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 0.99) # seeing which courses are more frequent
most_followed = course_freq[is_popular]
most_followed_ordered = most_followed[order(course_freq[is_popular])]
print(most_followed_ordered)
cat("____________________________________________________________________\n")
}
plot(ComplClusters, labels = F)
identify(ComplClusters, mostFollowed)
?order
mostFollowed = function(k, percentage = 0.6){
course_freq = apply(datafexam_ordered[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 0.99) # seeing which courses are more frequent
most_followed = course_freq[is_popular]
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)]
print(most_followed_ordered)
print(most_followed)
cat("____________________________________________________________________\n")
}
plot(ComplClusters, labels = F)
identify(ComplClusters, mostFollowed) # click over a branch to see the most followed courses!
mostFollowed = function(k, percentage = 0.6){
course_freq = apply(datafexam_ordered[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 0.99) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(most_followed_ordered)
cat("____________________________________________________________________\n")
}
plot(ComplClusters, labels = F)
identify(ComplClusters, mostFollowed) # click over a branch to see the most followed courses!
ls.rm(k)
rm(k)
nD
rm(nD)
