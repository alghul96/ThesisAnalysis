?mona
monaClusters[["step"]]
hist(monaClusters[["step"]])
shapiro.test(monaClusters[["step"]])
rownames(clusterdataf)
rownames(clusterdataf)[monaClusters[["step"]]]
monaClusters[["step"]]
rownames(clusterdataf)[monaClusters[["step"]]< 1]
monaClusters[["step"]] < 1
monaClusters[["step"]]
monaClusters[["step"]] < 1
monaClusters[["step"]]
rownames(clusterdataf)[monaClusters[["step"]]< 6]
mostFollowed(rownames(clusterdataf)[monaClusters[["step"]]< 6])
rownames(clusterdataf)[monaClusters[["step"]]< 6]
warnings()
mostFollowed(rownames(as.matrix(clusterdataf))[monaClusters[["step"]]< 6])
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]]< 6])
rownames(datafexam_ordered)[monaClusters[["step"]]< 6]
clusterdataf = datafexam # select the dataframe to use for clustering
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]]< 6])
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] < 13])
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] < 8])
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] < 12])
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] < 6])
vector(names = c("a"))
monaClusters[["step"]] < 6
other_info[monaClusters[["step"]] < 6, "monGroups"] = 1
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] < 6 & monaClusters[["step"]] > 8])
[monaClusters[["step"]] < 6 & monaClusters[["step"]] > 8
monaClusters[["step"]] < 6 & monaClusters[["step"]] > 8
monaClusters[["step"]] > 6 & monaClusters[["step"]] < 8]
monaClusters[["step"]] > 6 & monaClusters[["step"]] < 8
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] > 6 & monaClusters[["step"]] < 8])
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] > 6 & monaClusters[["step"]] < 9])
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] > 9 )
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] > 9] )
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] < 6] )
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] >= 6 & monaClusters[["step"]] < 8])
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] >= 8] )
38+90+194
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] < 6] )
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] >= 6 & monaClusters[["step"]] < 9])
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] >= 9] )
other_info[monaClusters[["step"]] >= 6 & monaClusters[["step"]] < 9] = 2
other_info[monaClusters[["step"]] < 6, "monGroups"] = 1
other_info[monaClusters[["step"]] >= 6 & monaClusters[["step"]] < 9] = 2
monaClusters[["step"]] >= 6 & monaClusters[["step"]] < 9
other_info[monaClusters[["step"]] >= 6 & monaClusters[["step"]] < 9], "monGroups"] = 2
other_info[monaClusters[["step"]] >= 6 & monaClusters[["step"]] < 9, "monGroups"] = 2
other_info[rownames(datafexam_ordered)[monaClusters[["step"]] >= 9, "monGroups"] = 3
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] < 6] )
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] >= 6 & monaClusters[["step"]] < 9])
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] >= 9])
other_info[rownames(datafexam_ordered)[monaClusters[["step"]] >= 9, "monGroups"] = 3
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] < 6] )
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] >= 6 & monaClusters[["step"]] < 9])
mostFollowed(rownames(datafexam_ordered)[monaClusters[["step"]] >= 9])
other_info[monaClusters[["step"]] >= 9, "monGroups"] = 3
monagroup = other_info$monGroups
monagroup
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = monagroup)
other_info[monaClusters[["step"]] < 3, "monGroups"] = 1
other_info[monaClusters[["step"]] >= 3 & monaClusters[["step"]] < 9, "monGroups"] = 2
other_info[monaClusters[["step"]] >= 9, "monGroups"] = 3
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = monagroup)
rm(animals)
str(clusterdataf)
write.csv(clusterdataf, "Python/clusterdata.csv")
?write.csv
write.csv(clusterdataf, "Python/clusterdata.csv", row.names = FALSE)
install.packages("PythonInR")
library(PythonInR)
??PythonInR
autodetectPython()
BEGIN.Python()
asd
pyConnect()
library(PythonInR)
autodetectPython()
pyConnect()
pyExecfile('Python/mixtureclustering.py')
pyExecp("import mixturemodels")
pyExecp("import mixturemodels.py")
pyExecp("import Python/mixturemodels")
pyExecp("import 'Python/mixturemodels'")
pyExecfile('Python/mixtureclustering.py')
pyExit()
pyConnect()
pyExecfile('Python/mixtureclustering.py')
pyExec("print modelclust")
other_info["mixtgroup"] = pyGet("modelclust", simplify = FALSE) + 1
pyExit()
library(PythonInR)
pyConnect()
pyExecfile('Python/mixtureclustering.py')
pyExec("print modelclust")
other_info["mixtgroup"] = pyGet("modelclust", simplify = FALSE) + 1
library(rgl)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = other_info[,3])
pyExec("print modelclust")
pyExecfile('Python/mixtureclustering.py')
pyExecfile('Python/mixtureclustering.py')
pyExec("print modelclust")
other_info["mixtgroup"] = pyGet("modelclust", simplify = FALSE) + 1
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = other_info[,3])
pyExecfile('Python/mixtureclustering.py')
pyExec("print modelclust")
other_info["mixtgroup"] = pyGet("modelclust", simplify = FALSE) + 1
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = other_info[,3])
pyExecfile('Python/mixtureclustering.py')
other_info["mixtgroup"] = pyGet("modelclust", simplify = FALSE) + 1
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = other_info[,3])
pyExecfile('Python/mixtureclustering.py')
pyExec("print modelclust")
other_info["mixtgroup"] = pyGet("modelclust", simplify = FALSE) + 1
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = other_info[,3])
pyExecfile('Python/mixtureclustering.py')
other_info["mixtgroup"] = pyGet("modelclust", simplify = FALSE) + 1
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = other_info[,3])
pyExecfile('Python/mixtureclustering.py')
pyExec("print modelclust")
other_info["mixtgroup"] = pyGet("modelclust", simplify = FALSE) + 1
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = other_info[,3])
pyExecfile('Python/mixtureclustering.py')
pyExec("print modelclust")
pyExecfile('Python/mixtureclustering.py')
pyExec("print modelclust")
pyExecfile('Python/mixtureclustering.py')
pyExec("print modelclust")
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = other_info[,3])
pyExecfile('Python/mixtureclustering.py')
pyExec("print modelclust")
other_info["mixtgroup"] = pyGet("modelclust", simplify = FALSE) + 1
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = other_info[,3])
pyExit()
mixtgroup_3 = other_info["mixtgroup"]
mixtgroup_3 = as.vector(other_info["mixtgroup"])
mixtgroup_3
class(mixtgroup_3)
class(as.vector(other_info["mixtgroup"]))
mixtgroup_3 = as.vector.factor(other_info["mixtgroup"])
class(mixtgroup_3)
mixtgroup_3 = as.vector.factor(other_info["mixtgroup"])
mixtgroup_3 = as.vector(other_info["mixtgroup"])
class(mixtgroup_3)
mostFollowed(mixtgroup_3[mixtgroup_3 == 1])
mostFollowed(mixtgroup_3[mixtgroup_3 == 2])
mostFollowed(mixtgroup_3[mixtgroup_3 == 3])
mixtgroup_3 == 3
mostFollowed(datafexam[mixtgroup_3 == 3])
mostFollowed(mixtgroup_3[mixtgroup_3 == 3])
mostFollowed(mixtgroup_3[mixtgroup_3 == 2])
mostFollowed(mixtgroup_3[mixtgroup_3 == 1])
47 + 157 + 118
rownames(clusterdataf)
mostFollowed(rownames(clusterdataf)[mixtgroup_3 == 1]) # Group 1
mostFollowed(rownames(clusterdataf)[mixtgroup_3 == 1]) # Group 1
mostFollowed(rownames(clusterdataf)[mixtgroup_3 == 2]) # Group 2
mostFollowed(rownames(clusterdataf)[mixtgroup_3 == 3]) # Group 3
pyConnect()
pyExecfile('Python/mixtureclustering.py')
other_info["mixtgroup"] = pyGet("modelclust", simplify = FALSE) + 1
pyGet("clustprob", simplify = FALSE)
library(PythonInR)
pyConnect()
pyExecfile('Python/mixtureclustering.py')
other_info["mixtgroup"] = pyGet("modelclust", simplify = FALSE) + 1
pyGet("clustprob", simplify = FALSE)
pyConnect()
pyExecfile('Python/mixtureclustering.py')
other_info["mixtgroup"] = pyGet("modelclust", simplify = FALSE) + 1
pyGet("clustprob", simplify = FALSE)
mixtprob = pyGet("clustprob", simplify = FALSE)
mixtprob
mixtprob = as.data.frame(pyGet("clustprob", simplify = FALSE))
mixtprob
mixtprototypes = as.data.frame(pyGet("prototype", simplify = FALSE))
pyExit()
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = other_info[,3])
library(rgl)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = other_info[,3])
plot(mixtprob)
plot(mixtprob)
plot(mixtprob[1])
plot(mixtprob[,1])
str(mixtprob)
mixtprob$V1
plot(mixtprob$V1)
plot(mixtprob$V1[])
mixtprob = as.matrix(pyGet("clustprob", simplify = FALSE))
as.matrix(mixtprob)
mixtprob = as.matrix(mixtprob)
mixtprob
mixtprob[,1]
mixtprob[,2]
mixtprob[,3]
mixtprob[1,3]
names(mixtprob[1,3])
names(mixtprob[1,3]$V3)
names(mixtprob[1,3])
mixtprob$V3
as.list(mixtprob)
mixtprob = as.list(mixtprob)
mixtprob
mixtprob[1]
mixtprob[1,1]
mixtprob[,1]
library(PythonInR)
pyConnect() # connecting to python session
pyExecfile('Python/mixtureclustering.py')
other_info["mixtgroup"] = pyGet("modelclust", simplify = FALSE) + 1
mixtgroup_3 = as.vector(other_info["mixtgroup"])
mixtprob = pyGet("clustprob", simplify = TRUE)
mixtprototypes = pyGet("prototype", simplify = TRUE)
pyExit()
cbind(mixtgroup_3, mixtprob)
hist(mixtprob[,1])
hist(mixtprob[,3])
cbind(names(clusterdataf), mixtprototypes)
image(mixtprototypes, col = c(0,2))
View(mostFollowed)
View(mostFollowed)
clusterdataf[k, ]
clusterdataf[1, ]
clusterdataf[2, ]
clusterdataf[3, ]
clusterdataf[4, ]
table(kgroup_3)
table
levels(c(12,12))
levels(datafexam)
factor(kgroup_3)
factor(kgroup_3)$levels
factor(kgroup_3)[2]
factor(kgroup_3)[[]]
names(factor(kgroup_3))
levels(factor(kgroup_3))
levels(factor(clustergroup))
clusterdataf[kgroup3 == factor(3)]
clusterdataf[kgroup3 == factor(3), ]
factor(3)
factor(5)
clusterdataf[kgroup3 == factor(3), ]
rownames(clusterdataf)[mixtgroup_3 == 1]
rownames(clusterdataf)[mixtgroup_3 == factor(1)]
rownames(clusterdataf)[mixtgroup_3 == factor(2)]
rownames(clusterdataf)[kgroup_3 == factor(2)]
rownames(clusterdataf)[kgroup_3 == factor(1)]
rownames(clusterdataf)[kgroup_3 == 1]
clustergroup == as.numeric(i)
kgroup_3 == as.numeric(factor(1))
mixtgroup_3 == as.numeric(factor(1))
mostFollowed_byclust = function(clustergroup, percentage = 0.7){
cluster_number = levels(factor(clustergroup))
for(i in 1:length(cluster_number))
k = clustergroup == as.numeric(i)
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(length(k))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
mostFollowed_byclust(kgroup_3)
mostFollowed_byclust(kgroup_2)
mostFollowed_byclust(kgroup_1)
mostFollowed_byclust(kgroup_4)
mostFollowed_byclust = function(clustergroup, percentage = 0.7){
cluster_number = levels(factor(clustergroup))
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i)
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(length(k))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
mostFollowed_byclust(kgroup_4)
mostFollowed_byclust = function(clustergroup, percentage = 0.7){
cluster_number = levels(factor(clustergroup))
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i)
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(length(k == T))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
mostFollowed_byclust(kgroup_4)
mostFollowed_byclust = function(clustergroup, percentage = 0.7){
cluster_number = levels(factor(clustergroup))
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i)
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(length(names(clusterdataf)[k == T]))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
mostFollowed_byclust(kgroup_4)
mostFollowed_byclust = function(clustergroup, percentage = 0.7, clusterdataf = clusterdataf){
cluster_number = levels(factor(clustergroup))
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i)
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(length(names(clusterdataf)[k == T]))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
mostFollowed_byclust(kgroup_4)
mostFollowed_byclust = function(clustergroup, percentage = 0.7){
cluster_number = levels(factor(clustergroup))
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i)
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(length(names(clusterdataf)[k == T]))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
mostFollowed_byclust(kgroup_4)
cat("aaa", "bbb")
mostFollowed_byclust = function(clustergroup, percentage = 0.7){
cluster_number = levels(factor(clustergroup))
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i)
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(cat("Group ", i, "of dimention",length(names(clusterdataf)[k == T])))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
mostFollowed_byclust(kgroup_4)
mostFollowed_byclust = function(clustergroup, percentage = 0.7){
cluster_number = levels(factor(clustergroup))
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i)
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(cat("Group ", i, "of dimention", length(names(clusterdataf)[k == T]), "ok"))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
mostFollowed_byclust(kgroup_4)
?cat
mostFollowed_byclust = function(clustergroup, percentage = 0.7){
cluster_number = levels(factor(clustergroup))
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i)
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(paste("Group ", i, "of dimention", length(names(clusterdataf)[k == T])))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
mostFollowed_byclust(kgroup_4)
mostFollowed_byclust(mixtgroup_3)
mostFollowed_byclust(mixtgroup_3)
mostFollowed_byclust(other_info[,3])
mostFollowed_byclust(hgroup_3)
rm(hgroups_3)
mostFollowed_byclust = function(clustergroup, percentage = 0.7, graph = TRUE){
cluster_number = levels(factor(clustergroup))
if(graph == TRUE) hist(table(clustergroup), main = "Distribution of clusters.S")
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i)
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(paste("Group ", i, "of dimention", length(names(clusterdataf)[k == T])))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
mostFollowed_byclust(other_info[,3])
mostFollowed_byclust(hgroup_3)
mostFollowed_byclust(hgroup_3)
mostFollowed_byclust = function(clustergroup, percentage = 0.7, graph = TRUE){
cluster_number = levels(factor(clustergroup))
if(graph == TRUE) hist(clustergroup, main = "Distribution of clusters")
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i)
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(paste("Group ", i, "of dimention", length(names(clusterdataf)[k == T])))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
mostFollowed_byclust(other_info[,3])
mostFollowed_byclust = function(clustergroup, percentage = 0.7, graph = TRUE){
cluster_number = levels(factor(clustergroup))
if(graph == TRUE) hist(clustergroup, main = "Distribution of clusters", breaks = length(cluster_number))
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i)
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(paste("Group ", i, "of dimention", length(names(clusterdataf)[k == T])))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
mostFollowed_byclust(other_info[,3])
mostFollowed_byclust(hgroup_3)
mostFollowed_byclust(other_info[,3])
hgroup_3 = cutree(WardClusters, k = 3)
mostFollowed_byclust(hgroup_3)
mostFollowed_byclust = function(clustergroup, percentage = 0.7, graph = TRUE){
cluster_number = levels(factor(clustergroup))
if(graph == TRUE) hist(clustergroup, main = "Distribution of clusters", breaks = length(cluster_number), col = "lightblue")
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i)
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(paste("Group ", i, "of dimention", length(names(clusterdataf)[k == T])))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
mostFollowed_byclust(hgroup_3)
mostFollowed_byclust = function(clustergroup, percentage = 0.7, graph = TRUE){
cluster_number = levels(factor(clustergroup))
if(graph == TRUE) hist(clustergroup, main = "Distribution of clusters", breaks = length(cluster_number), col = "lightblue", xlim = length(cluster_number))
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i)
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(paste("Group ", i, "of dimention", length(names(clusterdataf)[k == T])))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
mostFollowed_byclust(hgroup_3)
mostFollowed_byclust = function(clustergroup, percentage = 0.7, graph = TRUE){
cluster_number = levels(factor(clustergroup))
if(graph == TRUE) hist(clustergroup, main = "Distribution of clusters", breaks = length(cluster_number), col = "lightblue")
for(i in 1:length(cluster_number)){
k = clustergroup == as.numeric(i)
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(paste("Group ", i, "of dimention", length(names(clusterdataf)[k == T])))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
}
mostFollowed_byclust(hgroup_3)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = other_info[,3])
library(rgl)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = other_info[,3])
pc$pamobject$medoids
cluster.stats(distances, kmedoidsClusters$cluster)
rm(kgroup3)
mostFollowed_byclust(kgroup_3)
mostFollowed_byclust(kgroup_4)
kgroup_4 = kmeansClusters_rep[[3]]@cluster
mostFollowed_byclust(kgroup_4)
kgroup_3 = kmeansClusters_rep[[2]]@cluster
mostFollowed_byclust(kgroup_4)
mostFollowed_byclust(kgroup_3)
