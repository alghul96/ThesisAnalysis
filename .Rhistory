# Most seen exams in each group
mostFollowed(rownames(clusterdataf)[kgroup == 1]) # Group 1
mostFollowed(rownames(clusterdataf)[kgroup == 2]) # Group 2
mostFollowed(rownames(clusterdataf)[kgroup == 3]) # Group 3
mostFollowed(rownames(clusterdataf)[kgroup == 4]) # Group 4
mostFollowed(rownames(clusterdataf)[kgroup == 5]) # Group 5
hist(kgroup, breaks = 5)
kmeansClusters = cclust(clusterdataf, k = 5)
summary(kmeansClusters)
# Cluster of each instance
# kgroup = kmeansClusters$cluster
kgroup = clusters(kmeansClusters)
# Most seen exams in each group
mostFollowed(rownames(clusterdataf)[kgroup == 1]) # Group 1
mostFollowed(rownames(clusterdataf)[kgroup == 2]) # Group 2
mostFollowed(rownames(clusterdataf)[kgroup == 3]) # Group 3
mostFollowed(rownames(clusterdataf)[kgroup == 4]) # Group 4
mostFollowed(rownames(clusterdataf)[kgroup == 5]) # Group 5
hist(kgroup, breaks = 5)
summary(kmeansClusters)
withinss
kmeansClusters$withinss
kmeansClusters@withinss
kmeansClusters@centers
Silhouette(kmeansClusters)
?Silhouette()
kcenters = kmeansClusters@totaldist
kcenters = kmeansClusters@centers
dist(kcenters)
Daisy(kcenters)
daisy(kcenters)
library(cluster)
daisy(kcenters)
daisy(kcenters, metric = "manhattan") # distances beetween the cluster centers
?daisy
?stepFlexclust
stepFlexclust(clusterdataf)
library(flexclust)
library(cluster)
daisy(kcenters, metric = "manhattan") # distances beetween the cluster centers
stepFlexclust(clusterdataf)
stepFlexclust(clusterdataf, k = 5)
stepFlexclust(clusterdataf, k = 10)
stepFlexclust(clusterdataf, k = 5)
stepFlexclust(clusterdataf, k = 5, FUN = cclust)
stepFlexclust(clusterdataf, k = 5, FUN = cclust)
stepFlexclust(clusterdataf, k = 5, FUN = cclust)
stepFlexclust(clusterdataf, k = 5, nrep = 1000, FUN = cclust)
kmeansClusters_rep = stepFlexclust(clusterdataf, k = 5, nrep = 1000, FUN = cclust, multicore = TRUE)
kmeansClusters_rep
kmeansClusters_rep@centers
rownames(clusterdataf)[kgroup == 1]
kcenters = kmeansClusters_rep@centers
daisy(kcenters, metric = "manhattan") # distances beetween the cluster centers
View(kcenters)
kcenters = kmeansClusters@centers
kcenters = kmeansClusters_rep@centers
daisy(kcenters, metric = "manhattan") # distances beetween the cluster centers
daisy(kcenters, metric = "manhattan")
kmeansClusters_rep
clusters(kmeansClusters_rep)
?getModel
kmeansClusters_rep = stepFlexclust(clusterdataf, k = 3:8, nrep = 1000, FUN = cclust, multicore = TRUE)
cclust(clusterdataf, k = 3:5)
cclust(clusterdataf, k = 5)
kmeansClusters_rep = stepFlexclust(clusterdataf, k = 3:8, nrep = 500, FUN = cclust, multicore = TRUE)
kmeansClusters_rep
plot(kmeansClusters_rep)
getModel(kmeansClusters_rep)
getModel(kmeansClusters_rep, 4)
getModel(kmeansClusters_rep, 2)
getModel(kmeansClusters_rep, 3)
kmeansClusters_rep
kmeansClusters_rep[[5]]
kmeansClusters_rep[[5]] # works as a list
plot(ComplClusters, labels = other_info$immyear)
identify(ComplClusters, mostFollowed) # click over a branch to see the most followed courses!
split(clusterdataf, cutree_1k.dendrogram(5))
as.data.frame()
cutree_1k.dendrogram()
?cutree
library(stats)
cutree(ComplClusters, k = 5)
hist(cutree(ComplClusters, k = 5))
hist(cutree(ComplClusters, h = .86))
hist(cutree(ComplClusters, h = .8))
hist(cutree(ComplClusters, h = .84))
hist(cutree(ComplClusters, h = .83))
kmeansClusters_rep
daisy(kmeansClusters_rep[[8]]@centers)
kmeansClusters_rep[[8]]
kmeansClusters_rep[[5]] # works as a list
daisy(kmeansClusters_rep[[6]]@centers)
kmeansClusters_rep[[6]]
daisy(kmeansClusters_rep[[6]]@centers, metric = "manhattan")
clusterdistances = daisy(kmeansClusters_rep[[6]]@centers, metric = "manhattan")
hclust(clusterdistances, method = "complete")
plot(hclust(clusterdistances, method = "complete"))
plot(hclust(clusterdistances, method = "single"))
plot(hclust(clusterdistances, method = "complete"))
plot(hclust(clusterdistances, method = "ward"))
plot(hclust(clusterdistances, method = "ward"))
plot(hclust(clusterdistances, method = "ward.D"))
clusterdistances = daisy(kmeansClusters_rep[[4]]@centers, metric = "manhattan")
plot(hclust(clusterdistances, method = "ward.D"))
clusterdistances = daisy(kmeansClusters_rep[[2]]@centers, metric = "manhattan")
plot(hclust(clusterdistances, method = "ward.D"))
clusterdistances = daisy(kmeansClusters_rep[[6]]@centers, metric = "manhattan")
plot(hclust(clusterdistances, method = "ward.D"))
distances = daisy(clusterdataf,
type = list(asymm = c(1:ncol(clusterdataf))), # threating the variables as asymmetric binaries
metric = "manhattan")
distances = daisy(clusterdataf,
type = list(asymm = c(1:ncol(clusterdataf))), # threating the variables as asymmetric binaries
metric = "gower")
ComplClusters = hclust(distances, method = "complete")
plot(ComplClusters, labels = other_info$immyear)
ComplClusters = hclust(distances, method = "ward.D")
plot(ComplClusters, labels = other_info$immyear)
?ward.D
?Compl.Clusters
?Compl.Clusters
hclust()
?hclust
WardClusters = hclust(distances, method = "Ward.D")
WardClusters = hclust(distances, method = "ward.D")
distances
plot(WardClusters, labels = other_info$immyear)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
plot(hclust(clusterdistances, method = "ward.D"))
identify(hclust(clusterdistances, method = "ward.D"), mostFollowed)
library(cluster)
library(stats)
windows()
plot(WardClusters, labels = other_info$immyear)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
library(cluster)
kmeans
library(flexclust)
stepFlexclust
?stepFlexclust
stepFlexclust(clusterdataf, k = 3:8, verbose = TRUE nrep = 500, FUN = cclust, multicore = TRUE)
stepFlexclust(clusterdataf, k = 3:8, verbose = TRUE, nrep = 500, FUN = cclust, multicore = TRUE)
head(cov(datafexam))
apply(datafexam,2,sd)
cor(datafexam)
princomp(datafexam, cor = TRUE)
pca_data = princomp(datafexam, cor = TRUE)
loadings(pcs_data)
pca_data = princomp(datafexam, cor = TRUE)
loadings(pcs_data)
loadings(pca_data)
summary(pca_data)
sum((pca_data$sdev)^2)
plot(pca_data$scores)
pca_data$scores
pca_data$scores[1]
pca_data$scores[,1]
length(pca_data$scores[1,])
length(pca_data$scores[,1])
plot(pca_data$scores[,1], pca_data$scores[,2])
plot(pca_data$scores[,1], pca_data$scores[,3])
plot(pca_data$scores[,1], pca_data$scores[,2])
library(scatterplot3d)
install.packages("scatterplot3d")
library(scatterplot3d)
sum((pca_data$sdev)^2)
scatterplot3d(pca_data$scores[,1], pca_data$scores[,2], pca_data$scores[,3])
?scatterplot3d
kgroup
scatterplot3d(pca_data$scores[,1], pca_data$scores[,2], pca_data$scores[,3], color = kgroup)
scatterplot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
color = kgroup,
angle = 3)
scatterplot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
color = kgroup,
angle = 1)
scatterplot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
color = kgroup,
angle = 2)
scatterplot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
color = kgroup,
angle = 16)
scatterplot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
color = kgroup,
angle = 40)
scatterplot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
color = kgroup,
angle = 50)
scatterplot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
color = kgroup,
angle = c(1,2))
scatterplot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
color = kgroup,
angle =60)
scatterplot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
color = kgroup,
angle = 60)
scatterplot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
color = kgroup,
angle = 60)
scatterplot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
color = kgroup,
angle = 60)
scatterplot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
color = kgroup,
angle = 70)
install.packages("rgl")
library(rgl)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
color = kgroup)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 4],
col = kgroup)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 5],
col = kgroup)
plot3d
?plot3d
legend("topleft", col = kgrop)
legend(legend = "topleft", col = kgrop)
legend("topleft", legend = kgrop)
?legend
legend("topleft", legend = kgrop)
legend("topleft", legend = kgroup)
legend("topleft", col = kgroup)
legend("topleft", legend = c(1,2,3,4,5), col = kgroup)
legend("topleft", legend = c(1,2,3,4,5), col = c(1:5))
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 5],
col = kgroup)
legend("topleft", legend = c(1,2,3,4,5), col = c(1:5))
colors(1:5)
plot(color = )
?legend3d
legend3d(plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 5],
col = kgroup))
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 5],
col = kgroup)
legend3d(plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 5],
col = kgroup))
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup)
pca_data = princomp(datafexam, cor = F)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup)
sum((pca_data$sdev)^2)
summary(pca_data)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 4],
col = kgroup)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup)
kmeansClusters_rep[[5]] # works as a list
kmeansClusters_rep[[2]] # works as a list
kmeansClusters_rep[[2]] # works as a list
kgroup_5 = clusters(kmeansClusters)
library(flexclust)
kgroup_5 = clusters(kmeansClusters)
rm(kgroup)
kmeansClusters
kmeansClusters_rep[[2]] # works as a list
kmeansClusters_rep[[2]]$clusters
kmeansClusters_rep[[2]]@cluster
kgroup_4 = kmeansClusters_rep[[2]]@cluster
mostFollowed(rownames(clusterdataf)[kgroup_4 == 2]) # Group 2
mostFollowed(rownames(clusterdataf)[kgroup_4 == 1]) # Group 1
mostFollowed(rownames(clusterdataf)[kgroup_4 == 3]) # Group 3
mostFollowed(rownames(clusterdataf)[kgroup_4 == 4]) # Group 4
kmeansClusters_rep[[2]]@centers > 0.8
kmeansClusters_rep[[2]]@centers[,2]
kmeansClusters_rep[[2]]@centers[2,]
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_4)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_5)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_4)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_5)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_4)
?rgl
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_4)
open3d()
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_5)
names(pca_data)
names(pca_data)$loadings
pca_data$loadings
pca_data$loadings[, 1:3]
pca_data$loadings[, 1:3] > 6
pca_data$loadings[, 1:3] > apply(pca_data$loadings[, 1:3], 2, mean)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_4)
library(rgl)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_4)
pca_data$loadings[, 1:3] > apply(pca_data$loadings[, 1:3], 1, mean)
pca_data$loadings[, 1:3] > apply(pca_data$loadings[, 1:3], 2, mean)
pca_data$loadings[, 1:3]
library(scatterplot3d)
library(rgl)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_4)
image(as.matrix(datafexam_ordered), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
image(as.matrix(datafexam), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
names(datafexam)
datafexam_ordered = datafexam[order(colnames(datafexam))]
names(datafexam_ordered)
plot(WardClusters, labels = other_info$immyear)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
plot(ComplClusters, labels = other_info$immyear)
identify(ComplClusters, mostFollowed) # click over a branch to see the most followed courses!
plot(ComplClusters, labels = other_info$immyear)
plot(ComplClusters, labels = other_info$immyear)
plot(ComplClusters, labels = other_info$immyear)
ComplClusters = hclust(distances, method = "complete")
plot(ComplClusters, labels = other_info$immyear)
identify(ComplClusters, mostFollowed) # click over a branch to see the most followed courses!
mostFollowed(rownames(clusterdataf)[kgroup_4 == 2]) # Group 2
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_4)
library(scatterplot3d)
library(rgl)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_4)
pca_data$loadings[, 1:3]
pca_data$loadings[, 1:3]
names(datafexam_ordered)
View(datafexam_ordered)
write.csv(names(datafexam_ordered), "nomivar.csv")
mostFollowed(rownames(clusterdataf)[kgroup_4 == 2]) # Group 2
mostFollowed(rownames(clusterdataf)[kgroup_4 == 3]) # Group 3
mostFollowed(rownames(clusterdataf)[kgroup_4 == 4]) # Group 4
mostFollowed(rownames(clusterdataf)[kgroup_4 == 1]) # Group 1
stepFlexclust(clusterdataf, k = 3:8, nrep = 500, FUN = cclust, multicore = TRUE)
library(flexclust)
kmeansClusters_rep
plot(kmeansClusters_rep)
?help(stepFlexclust)
clusterdistances
plot(hclust(clusterdistances, method = "ward.D"))
class(laureati[1,1])
laureati <- read_excel("D:/Box Sync/#UNI/Materiale tesi/Analysis/ThesisAnalysis/laureati.xls", sheet = "recode 2") # import of the recoded dataset
library(readxl)
laureati <- read_excel("D:/Box Sync/#UNI/Materiale tesi/Analysis/ThesisAnalysis/laureati.xls", sheet = "recode 2") # import of the recoded dataset
laureati <- read_excel("D:/Box Sync/#UNI/Materiale tesi/Analysis/ThesisAnalysis/laureati.xls", sheet = "recode 2") # import of the recoded dataset
View(laureati)
datafexam = data.frame(NULL) # initializing the dataframes
for(i in 1:nrow(laureati)){
mat = laureati[i, 1]
exam = laureati[i, 3]
datafexam[mat, exam] = 1
}
175 - 104
image((as.matrix(datafexam)), col = "red")
datafexam[is.na(datafexam)] = 0
image(as.matrix(datafexam_ordered), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
image(as.matrix(datafexam), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
View(datafexam)
datafexam_ordered[, "RICERCA OPERATIVA M"]
datafexam_ordered = datafexam[order(colnames(datafexam))]
other_info = data.frame(row.names = row.names(datafexam_ordered))
other_info[,"immyear"] = datafexam_ordered[,"immyear"]
for(i in 1:nrow(carriere)){
if (!is.na(carriere$`Data laurea`[i])){ # if the student is graduated
mat = carriere[i, 1]
#cod = carriere[i, 2]
immyear = carriere[i,5]
datafexam_ordered[mat, "immyear"] = immyear
}
}
other_info[,"immyear"] = datafexam_ordered[,"immyear"]
datafexam_ordered[,-"immyear"]
datafexam_ordered[,-immyear]
View(datafexam_ordered)
names(datafexam_ordered)
datafexam_ordered[,-105]
datafexam_ordered = datafexam_ordered[,-105]
image(as.matrix(datafexam), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
image(as.matrix(datafexam_ordered), xlab = "Matricole", ylab = "Esami", col = c("white", "red"))
library(cluster)
library(stats)
clusterdataf = datafexam # select the dataframe to use for clustering
distances = daisy(clusterdataf,
type = list(asymm = c(1:ncol(clusterdataf))), # threating the variables as asymmetric binaries
metric = "gower")
ComplClusters = hclust(distances, method = "complete")
WardClusters = hclust(distances, method = "ward.D") # threating the variables as numeric
mostFollowed = function(k, percentage = 0.6){
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 0.99) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(length(k))
print(most_followed_ordered)
cat("____________________________________________________________________\n")
}
plot(ComplClusters, labels = other_info$immyear)
identify(ComplClusters, mostFollowed) # click over a branch to see the most followed courses!
mostFollowed = function(k, percentage = 0.6){
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(length(k))
print(most_followed_ordered)
cat("____________________________________________________________________\n")
}
plot(ComplClusters, labels = other_info$immyear)
identify(ComplClusters, mostFollowed) # click over a branch to see the most followed courses!
plot(WardClusters, labels = other_info$immyear)
plot(ComplClusters, labels = other_info$immyear)
plot(WardClusters, labels = other_info$immyear)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
mostFollowed = function(k, percentage = 0.7){
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(length(k))
print(most_followed_ordered)
cat("____________________________________________________________________\n")
}
mostFollowed = function(k, percentage = 0.7){
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(length(k))
print(most_followed_ordered)
cat("____________________________________________________________________\n")
}
plot(WardClusters, labels = other_info$immyear)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
mostFollowed = function(k, percentage = 0.7){
course_freq = apply(clusterdataf[k, ], 2, mean)
is_popular = (course_freq >= percentage) & (course_freq <= 1) # seeing which courses are more frequent
most_followed = course_freq[is_popular] # selection of the courses
most_followed_ordered = most_followed[order(course_freq[is_popular], decreasing = T)] # ordering
print(length(k))
print(as.data.frame(most_followed_ordered))
cat("____________________________________________________________________\n")
}
plot(WardClusters, labels = other_info$immyear)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
library(flexclust)
kmeansClusters = stepFlexclust(clusterdataf, k = 5, nrep = 1000, FUN = cclust, multicore = TRUE)
summary(kmeansClusters)
daisy(kcenters, metric = "manhattan") # distances beetween the cluster centers
kgroup_5 = clusters(kmeansClusters)
mostFollowed(rownames(clusterdataf)[kgroup_5 == 1]) # Group 1
mostFollowed(rownames(clusterdataf)[kgroup_5 == 2]) # Group 2
mostFollowed(rownames(clusterdataf)[kgroup_5 == 3]) # Group 3
mostFollowed(rownames(clusterdataf)[kgroup_5 == 4]) # Group 4
plot(WardClusters, labels = other_info$immyear)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
mostFollowed(rownames(clusterdataf)[kgroup_5 == 1]) # Group 1
kcenters$1
kcenters
kcenters$[1,]
kcenters$[1]
kcenters[1]
kcenters[1,]
mostFollowed(rownames(clusterdataf)[kgroup_5 == 1]) # Group 1
kcenters[1,]
kcenters = kmeansClusters@centers
daisy(kcenters, metric = "manhattan") # distances beetween the cluster centers
mostFollowed(rownames(clusterdataf)[kgroup_5 == 1]) # Group 1
kcenters[1,]
order(kcenters[1,])
kcenters[1,order(kcenters[1,])]
mostFollowed(rownames(clusterdataf)[kgroup_5 == 1]) # Group 1
hist(kgroup, breaks = 5)
hist(kgroup_5, breaks = 5)
kmeansClusters_rep = stepFlexclust(clusterdataf, k = 3:15, nrep = 600, FUN = cclust, multicore = FALSE)
kmeansClusters_rep = stepFlexclust(clusterdataf, k = 3:15, nrep = 600, FUN = cclust, multicore = TRUE)
kmeansClusters_rep = stepFlexclust(clusterdataf, k = 2:15, nrep = 600, FUN = cclust, multicore = TRUE)
kmeansClusters_rep
kmeansClusters_rep[[2]] # works as a list
kmeansClusters_rep[[0]] # works as a list
kmeansClusters_rep[[1]] # works as a list
kmeansClusters_rep[[2]]
kgroup_4 = kmeansClusters_rep[[3]]@cluster
kmeansClusters_rep[[3]]
plot(kmeansClusters_rep)
kmeansClusters_rep[[6]]
kmeansClusters_rep[[14]]
clusterdistances = daisy(kmeansClusters_rep[[14]]@centers, metric = "manhattan")
plot(hclust(clusterdistances, method = "ward.D"))
plot(kmeansClusters_rep)
kmeansClusters_rep[[14]]@centers
kgroup_4 = kmeansClusters_rep[[3]]@cluster
mostFollowed(rownames(clusterdataf)[kgroup_4 == 1]) # Group 1
mostFollowed(rownames(clusterdataf)[kgroup_4 == 2]) # Group 2
kmeansClusters_rep[[2]]@centers[2,] # same output
mostFollowed(rownames(clusterdataf)[kgroup_4 == 3]) # Group 3
mostFollowed(rownames(clusterdataf)[kgroup_4 == 4]) # Group 4
mostFollowed(rownames(clusterdataf)[kgroup_4 == 1]) # Group 1
mostFollowed(rownames(clusterdataf)[kgroup_4 == 2]) # Group 2
mostFollowed(rownames(clusterdataf)[kgroup_4 == 3]) # Group 3
mostFollowed(rownames(clusterdataf)[kgroup_4 == 4]) # Group 4
library(rgl)
pca_data = princomp(datafexam, cor = F)
summary(pca_data)
pca_data$loadings[, 1:3]
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_4)
plot3d(pca_data$scores[, 1], pca_data$scores[, 2], pca_data$scores[, 3],
col = kgroup_5)
