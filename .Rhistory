pyExecfile("model-based.py") # do not run
other_info["mixtgroup"] = pyGet("modelclust", simplify = FALSE) + 1
mixtgroup_3 = as.vector(other_info["mixtgroup"])
mixtprob = pyGet("clustprob", simplify = TRUE)
mixtprototypes = pyGet("prototype", simplify = TRUE)
pyExit()
mostFollowed_byclust(other_info[,3])
table(other_info[,1], other_info[,3])
cbind(courses_mixtgroup[,2:3], courses_mixtgroup[,2]+courses_mixtgroup[,3] < 0.2)
courses_mixtgroup = mostFollowed_byclust(other_info[,3], percentage = 0.7)
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
library(spatstat)
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
plot(as.im(rpoispp(100)), W = square(1000000))
library(spatstat)
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
library(spatstat)
library(spatstat)
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(as.im(rpoispp(100)), W = square(1000000))
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
table(other_info[,1], other_info[,3])
cbind(courses_mixtgroup[,2:3], courses_mixtgroup[,2]+courses_mixtgroup[,3] < 0.2)
cbind(courses_mixtgroup[,2:3], courses_mixtgroup[,2]+courses_mixtgroup[,3] < 0.2)
cbind(courses_mixtgroup[,2:3], courses_mixtgroup[,2]+courses_mixtgroup[,3] < 0.2)
cbind(courses_mixtgroup[,2:3], courses_mixtgroup[,2]+courses_mixtgroup[,3] < 0.2)
cbind(courses_mixtgroup[,2:3], courses_mixtgroup[,2]+courses_mixtgroup[,3] < 0.2)
cbind(courses_mixtgroup[,2:3], courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2)
courses_mixtgroup[,2:3]
courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3]
library(cluster)
daisy(courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3])
courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3]
apply(courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3], 1, sum)
apply(courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3], 1, difference)
apply(courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3], 1, sd)
plot(apply(courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3], 1, sd))
plot(apply(courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3], 1, sd), type = "h")
courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3]
hist(courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3])
plot(courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3])
multihist(courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3])
cbind(courses_mixtgroup[,2:3], courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2) # Most frequented courses in the two
courses_mixtgroup[courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2, 2:3]
courses_mixtgroup[apply(courses_mixtgroup[,2:3],,sum) > 0.2, 2:3]
courses_mixtgroup[apply(courses_mixtgroup[,2:3],1,sum) > 0.2, 2:3]
clusterdataf = datafexam
courses_mixtgroup = mostFollowed_byclust(other_info[,3], percentage = 0.7)
plot(
as.im(as.matrix(courses_mixtgroup),
W = owin(c(1,90), c(1,140))),
main = "Courses Frequencies Beetween Clusters")
table(other_info[,1], other_info[,3])
cbind(courses_mixtgroup[,2:3], courses_mixtgroup[,2] + courses_mixtgroup[,3] > 0.2) # Most frequented courses in the two
courses_mixtgroup[apply(courses_mixtgroup[,2:3],1,sum) > 0.2, 2:3]
courses_mixtgroup[,2:3]
courses_mixtgroup[apply(courses_mixtgroup[,2:3],1,sum) > 0.3, 2:3]
mixtprototypes
most_frequented_byclust = courses_mixtgroup[apply(courses_mixtgroup[,2:3],1,sum) > 0.3, 2:3]
cbind(most_frequented_byclust, mixtprototypes[,2:3])
cbind(courses_mixtgroup, mixtprototypes[,2:3])
cbind(courses_mixtgroup[2:3], mixtprototypes[,2:3])
library(flexclust)
kmeansClusters = stepFlexclust(clusterdataf, k = 3, nrep = 10000, FUN = cclust, multicore = TRUE)
summary(kmeansClusters)
kcenters = kmeansClusters@centers
kcenters
daisy(kcenters, metric = "manhattan") # distances beetween the cluster centers
kcenters = kmeansClusters@centers
kgroup_3 = kmeansClusters@cluster
kgroup_3
summary(kmeansClusters)
cbind(courses_mixtgroup[2:3], mixtprototypes[,2:3], kcenters[2:3,])
kcenters[2:3,]
cbind(courses_mixtgroup[2:3], mixtprototypes[,2:3], t(kcenters[2:3,]))
rm(courses_mixtgroup)
courses_mixtgroup = mostFollowed_byclust(other_info[,3], percentage = 0.7)
courses_kmeagroup = mostFollowed_byclust(kgroup_3, percentage = 0.7)
courses_kmeagroup
courses_mixtgroup = mostFollowed_byclust(other_info[,3], percentage = 0.7) # exam frequentation in mixture-model clusters
courses_kmeagroup = mostFollowed_byclust(kgroup_3, percentage = 0.7) # in k-means clusters
courses_mixtgroup[2:3]
courses_kmeagroup[2:3]
cbind(courses_mixtgroup[2:3], courses_kmeagroup[2:3])
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[2:3]), 2)
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[3:2]), 2)
mostFollowed_byclust(other_info[,3], percentage = 0.7)
mostFollowed_byclust(kgroup_3, percentage = 0.7)
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[3:2]), 2)
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[3:2]), 2)
hist(kgroup_3)
hist(mixtgroup_3)
hist(numeric(mixtgroup_3))
hist(as.matrix(mixtgroup_3))
hist(kgroup_3)
hist(as.matrix(mixtgroup_3))
mixtgroup_3 = as.vector(other_info["mixtgroup"])
hist(kgroup_3)
hist(as.matrix(mixtgroup_3))
hist(kgroup_3)
hist(as.matrix(mixtgroup_3))
autoplot(kgroup_3)
?autoplot
??autoplot
library(ggfortify)
autoplot(kgroup_3)
autoplot(table(kgroup_3))
hist(kgroup_3)
hist(as.matrix(mixtgroup_3))
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[3:2]), 2)
mostFollowed_byclust(other_info[,3], percentage = 0.7)
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[3:2]), 2)
courses_mixtgroup = mostFollowed_byclust(other_info[,3], percentage = 0.7) # exam frequentation in mixture-model clusters
courses_kmeagroup = mostFollowed_byclust(kgroup_3, percentage = 0.7) # in k-means clusters
clusterdataf = datafexam # select the dataframe to use for clustering
distances = daisy(clusterdataf,
type = list(asymm = c(1:ncol(clusterdataf))), # threating the variables as asymmetric binaries
metric = "gower")
ComplClusters = hclust(distances, method = "complete")
WardClusters = hclust(distances, method = "ward.D") # threating the variables as numeric
plot(WardClusters, labels = other_info$immyear, which.plot = 2)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
kmeansClusters = stepFlexclust(clusterdataf, k = 3, nrep = 10000, FUN = cclust, multicore = TRUE)
library(flexclust)
kmeansClusters = stepFlexclust(clusterdataf, k = 3, nrep = 10000, FUN = cclust, multicore = TRUE)
summary(kmeansClusters)
kcenters = kmeansClusters@centers
daisy(kcenters, metric = "manhattan") # distances beetween the cluster centers
kgroup_3 = kmeansClusters@cluster
hist(kgroup_3)
courses_kmeagroup = mostFollowed_byclust(kgroup_3, percentage = 0.7) # in k-means clusters
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[1:2]), 2)
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[2:1]), 2)
plot(ComplClusters, labels = other_info$immyear, which.plot = 2)
plot(WardClusters, labels = other_info$immyear, which.plot = 2)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
hgroup_3 = cutree(WardClusters, k = 3)
hgroup_3
mostFollowed_byclust(hgroup_3)
WardClusters = agnes(distances, diss = TRUE, method = "ward")
library(cluster)
WardClusters = agnes(distances, diss = TRUE, method = "ward")
hgroup_3 = cutree(WardClusters, k = 3)
mostFollowed_byclust(hgroup_3)
plot(WardClusters, labels = other_info$immyear, which.plot = 2)
WardClusters = hclust(distances, method = "ward.D") # threating the variables as numeric
plot(WardClusters, labels = other_info$immyear, which.plot = 2)
identify(WardClusters, mostFollowed) # click over a branch to see the most followed courses!
hgroup_3 = cutree(WardClusters, k = 3)
mostFollowed_byclust(hgroup_3)
courses_hgroup = mostFollowed_byclust(hgroup_3, percentage = 0.7) # in hierarchical clusters
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[2:1]), 2)
round(cbind(courses_mixtgroup[2:3], courses_kmeagroup[2:1], courses_hgroup[1:2]), 2)
comparison = cbind(courses_mixtgroup[2:3], courses_kmeagroup[2:1], courses_hgroup[1:2])
round(comparison, 2)
comparison = cbind(courses_mixtgroup[2:3], courses_kmeagroup[2:1], courses_hgroup[1:2])
round(comparison, 2)
writeClipboard(comparison)
write.csv(comparison, "comparison.csv")
kmedoidsClusters = pam(distances, k = 4, diss = TRUE)
library(cluster)
distances = daisy(clusterdataf,
type = list(asymm = c(1:ncol(clusterdataf))),
metric = "gower")
kmedoidsClusters = pam(distances, k = 4, diss = TRUE)
kgroup_4 = kmedoidsClusters$cluster
kmedoidsClusters = pam(distances, k = 3, diss = TRUE)
pc = pamk(distances, krange = 1:14, criterion = "asw", diss = TRUE)
library(fpc)
pc = pamk(distances, krange = 1:14, criterion = "asw", diss = TRUE)
pc
kmedgroup_3 = pc$pamobject$cluster
kmedgroup_3
mostFollowed_byclust(kmedgroup_3)
ls
ls()
courses_kmedgroup = mostFollowed_byclust(kmedgroup_3, percentage = 0.7) # in k-medoids
comparison = cbind(courses_mixtgroup[2:3], courses_kmeagroup[2:1], courses_hgroup[1:2], courses_kmedgroup[1:2])
round(comparison, 2)
hist(kgroup_3)
hist(as.matrix(mixtgroup_3))
list(courses_hgroup, courses_kmeagroup, courses_kmedgroup, courses_mixtgroup)
?list
names(courses_hgroup)
exam_frequencies = list(hierarchical = courses_hgroup, k-means = courses_kmeagroup, k-medoids = courses_kmedgroup, model-based = courses_mixtgroup)
exam_frequencies = list(courses_hgroup, courses_kmeagroup, courses_kmedgroup, courses_mixtgroup, sorted = TRUE)
exam_frequencies
exam_frequencies = list(courses_hgroup, courses_kmeagroup, courses_kmedgroup, courses_mixtgroup)
hist(exam_frequencies)
for i in exam_frequencies{
print(i)
}
for(i in exam_frequencies){
print(i)
}
hist(i)
for(i in exam_frequencies){
hist(i)
}
hist(courses_hgroup)
hist(kgroup_3)
results = list(hgroup_3, kgroup_3, kmedgroup_3, other_info[,3])
rm(exam)
for(i in results){
hist(i)
}
par(mfrow = c(2,2))
names(results)
results
for(i in results){
hist(i, main = "")
}
round(t(kcenters))
image(round(t(kcenters)))
kmedoidsClusters$medoids
cluterdataf[kmedoidsClusters$medoids]
clusterdataf[kmedoidsClusters$medoids]
clusterdataf[kmedoidsClusters$medoids, ]
t(clusterdataf[kmedoidsClusters$medoids, ])
image(t(clusterdataf[kmedoidsClusters$medoids, ]))
mixtprototypes
for(i in results){
hist(i, main = "")
}
par(mfrow = c(2,2))
for(i in results){
hist(i, main = "")
}
image(mixtprototypes)
image(round(t(kcenters)))
image(t(clusterdataf[kmedoidsClusters$medoids, ]))
par(mfrow = c(1,3))
image(round(t(kcenters)))
par(mfrow = c(3,1))
image(round(t(kcenters)))
image(mixtprototypes[, c()])
image(mixtprototypes[, c(3,2,1)])
par(mfrow = c(3,1))
image(round(t(kcenters)))
image(mixtprototypes[, c(3,2,1)])
image(t(clusterdataf[kmedoidsClusters$medoids, ]))
image(round(t(kcenters)), ylab = "Cluster")
image(round(t(kcenters)), ylab = "Cluster", ylim = c(1:3))
image(round(t(kcenters)), ylab = "Cluster")
image(mixtprototypes[, c(3,2,1)])
par(mfrow = c(3,1))
image(round(t(kcenters)), ylab = "Cluster")
image(mixtprototypes[, c(3,2,1)])
image(t(clusterdataf[kmedoidsClusters$medoids, ]))
?image
image(round(t(kcenters)), useRaster = TRUE)
image(round(t(kcenters)))
image(round(t(kcenters)), xaxs = FALSE)
image(round(t(kcenters)), xaxs = i)
image(round(t(kcenters)), xaxs = 102)
image(round(t(kcenters)), xaxs = c(0,102))
image(round(t(kcenters)))
image(round(t(kcenters)), axes = FALSE)
image(round(t(kcenters)), axes = FALSE, useRaster = TRUE)
image(round(t(kcenters)), axes = FALSE, main = "K-means centroids")
par(mfrow = c(3,1))
image(round(t(kcenters)), axes = FALSE, main = "K-means centroids")
image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model prototypes")
image(t(clusterdataf[kmedoidsClusters$medoids,]), axes = FALSE, main = "K-medoids Medoids")
?text
seq(0,1,3)
seq(0, 1, l = 3)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"))
text(x = .8, y = seq(0, 1, l = 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"), col = "1")
text(x = .8, y = seq(0, 1, l = 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"), col = "2")
text(x = .8, y = seq(0, 1, l = 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"), col = "3")
text(x = .8, y = seq(0, 1, l = 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"), col = "0")
text(x = 1, y = seq(0, 1, l = 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"), col = "0")
text(x = 0, y = seq(0, 1, l = 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"), col = "0")
text(x = -.2, y = seq(0, 1, l = 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"), col = "0")
text(x = -.2, y = seq(0, 1, l = 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"), col = "1")
text(x = -.4, y = seq(0, 1, l = 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"), col = "1")
text(x = 0, y = seq(0, 1, l = 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"), col = "1")
par(mfrow = c(3,1))
image(round(t(kcenters)), axes = FALSE, main = "K-means Centroids")
text(x = 0, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
text(x = 0, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[kmedoidsClusters$medoids,]), axes = FALSE, main = "K-medoids Medoids")
text(x = 0, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
par(mfrow = c(3,1))
image(round(t(kcenters)), axes = FALSE, main = "K-means Centroids")
text(x = 1 y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
text(x = 1, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[kmedoidsClusters$medoids,]), axes = FALSE, main = "K-medoids Medoids")
text(x = 1, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(round(t(kcenters)), axes = FALSE, main = "K-means Centroids")
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[kmedoidsClusters$medoids,]), axes = FALSE, main = "K-medoids Medoids")
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0", grid = TRUE)
image(round(t(kcenters)), axes = FALSE, main = "K-means Centroids", grid = TRUE)
line(0)
image(round(t(kcenters)), axes = FALSE, main = "K-means Centroids")
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
line(1)
line(.3)
abline(.3)
?abline
abline(h = .3)
abline(h = .3333)
abline(h = .27)
abline(h = .26)
abline(h = .25)
abline(h = c(.25, .75))
abline(h = c(.25, .75), col = 1)
abline(h = c(.25, .75), col = 0)
image(round(t(kcenters)), axes = FALSE, main = "K-means Centroids", abline(h = c(.25, .75), col = 0))
par(mfrow = c(3,1))
image(round(t(kcenters)), axes = FALSE, main = "K-means Centroids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(mixtprototypes[, c(3,2,1)], axes = FALSE, main = "Mixture-Model Prototypes")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(t(clusterdataf[kmedoidsClusters$medoids,]), axes = FALSE, main = "K-medoids Medoids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
image(round(t(kcenters)), axes = FALSE, main = "K-means Centroids", xlab = "Exams")
image(round(t(kcenters)), axes = FALSE, main = "K-means Centroids")
abline(h = c(.25, .75), col = 0)
text(x = .8, y = seq(0, 1, l = 3), labels = c("Sist. e Reti", "Intell. Art.", "Vecchio Ord."), col = "0")
cluster.stats(distances, kmeansClusters$cluster)
library(fpc)
cluster.stats(distances, kmeansClusters$cluster)
cluster.stats(distances, kmedoidsClusters$cluster)
kmeansClusters$cluster
cluster.stats(distances, kmeansClusters@cluster)
cluster.stats(distances, kmedoidsClusters$cluster)$avg.silwidth
cluster.stats(distances, kmeansClusters@cluster)$avg.silwidth
plot(cluster.stats(distances, kmedoidsClusters$cluster))
??fpc
cluster.stats(clustering = mixtgroup_3)
cluster.stats(clustering = mixtprototypes)
kmeansClusters@cluster
cluster.stats(clustering = results[4])
results[4]
cluster.stats(clustering = as.vector(results[4]))
cluster.stats(distances, results[[1]])$avg.silwidth
results[[1]]
for(i in results){
cluster.stats(distances, results[[1]])$avg.silwidth
}
print(cluster.stats(distances, results[[1]])$avg.silwidth)
for(i in results){
print(cluster.stats(distances, results[[1]])$avg.silwidth)
}
for(i in results){
print(cluster.stats(distances, results[[i]])$avg.silwidth)
}
for(i in results){
print(cluster.stats(distances, i)$avg.silwidth)
}
for(i in results){
print(cluster.stats(distances, i))
}
for(i in results){
print("_________________________")
print(cluster.stats(distances, i))
}
library(cluster)
silhouette(x = results[[1]])
silhouette(distances, x = results[[1]])
plot(silhouette(distances, x = results[[1]]))
plot(summary(silhouette(distances, x = results[[1]])))
silhouette(results[[1]], distances)
plot(silhouette(results[[1]], distances))
plot(silhouette(results[[2]], distances))
plot(silhouette(results[[3]], distances))
plot(silhouette(results[[4]], distances))
plot(silhouette(results[[4]], distances), cex.names=0.6,nmax=98,main="Silhouette Plot for 'Sparrows'
+ dataset, k=2")
plot(silhouette(results[[4]], distances), cex.names=0.6)
distances = daisy(clusterdataf,
type = list(asymm = c(1:ncol(clusterdataf))), # threating the variables as asymmetric binaries
metric = "gower")
for(i in results){
print("_________________________")
print(cluster.stats(distances, i))
plot(silhouette(i, distances), cex.names=0.6)
}
kmeansClusters_rep = stepFlexclust(clusterdataf, k = 2:4, nrep = 600, FUN = cclust, multicore = TRUE)
library(flexclust)
kmeansClusters_rep = stepFlexclust(clusterdataf, k = 2:4, nrep = 600, FUN = cclust, multicore = TRUE)
for(i in kmeansClusters_rep){
print(cluster.stats(distances, i))
plot(silhouette(i, distances), cex.names=0.6)
}
kmeansClusters_rep
for(i in kmeansClusters_rep) print i
for(i in kmeansClusters_rep) print(i)
for(i in kmeansClusters_rep@models){
print(cluster.stats(distances, i))
plot(silhouette(i, distances), cex.names=0.6)
}
for(i in kmeansClusters_rep@models) print(i)
for(i in kmeansClusters_rep@models$`2`){
print(cluster.stats(distances, i))
plot(silhouette(i, distances), cex.names=0.6)
}
for(i in kmeansClusters_rep@1){
print(cluster.stats(distances, i))
plot(silhouette(i, distances), cex.names=0.6)
}
kmeansClusters_rep@1
kmeansClusters_rep[[1]]
for(i in kmeansClusters_rep[[1]]){
print(cluster.stats(distances, i))
plot(silhouette(i, distances), cex.names=0.6)
}
kmeansClusters_rep[[i]]$cluster
kmeansClusters_rep[[i]]$clusters
kmeansClusters_rep[[1]]$clusters
kmeansClusters_rep[[1]]$cluster
kmeansClusters_rep[[1]]
kmeansClusters_rep[[1]]@cluster
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep[[i]]@cluster))
plot(silhouette(kmeansClusters_rep[[i]]@cluster), distances), cex.names=0.6)
}
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep[[i]]@cluster))
#  plot(silhouette(kmeansClusters_rep[[i]]@cluster), distances), cex.names=0.6)
}
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep[[i]]@cluster))
plot(silhouette(kmeansClusters_rep[[i]]@cluster), distances)), cex.names=0.6)
}
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep[[i]]@cluster))
plot((silhouette(kmeansClusters_rep[[i]]@cluster), distances), cex.names=0.6)
}
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep[[i]]@cluster))
plot((silhouette(kmeansClusters_rep[[i]]@cluster, distances), cex.names=0.6)
}
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep[[i]]@cluster))
plot(silhouette(1, distances), cex.names=0.6)
}
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep[[i]]@cluster))
plot(silhouette(kmeansClusters_rep[[i]]@cluster, distances), cex.names=0.6)
}
par(mfrow = c(1,3))
for(i in 1:3){
print(cluster.stats(distances, kmeansClusters_rep[[i]]@cluster))
plot(silhouette(kmeansClusters_rep[[i]]@cluster, distances), cex.names=0.6)
}
plot(kmeansClusters_rep)
kmeansClusters_rep = stepFlexclust(clusterdataf, k = 2:8, nrep = 600, FUN = cclust, multicore = TRUE)
plot(kmeansClusters_rep) # from the within sum of squares, we see that 3 clusters in the
plot(kmeansClusters_rep) # from the within sum of squares, we see that 3 clusters in the
library(fpc)
?clusterboot
rm(distances_matr)
clusterboot(distances, distances = TRUE)
clusterboot(clusterdataf, clustermethod = "kmeansCBI")
clusterboot(clusterdataf, clustermethod = "kmeans")
clusterboot(clusterdataf, clustermethod = "kmeans")
clusterboot(clusterdataf)
clusterboot(clusterdataf, clustermethod = kmeans)
clusterboot(clusterdataf, clustermethod = kmeans, centers = 3)
clusterboot(clusterdataf, clustermethod = kmeans(), centers = 3)
clusterboot(clusterdataf, clustermethod = kmeans(clusterdataf, 3))
clusterboot(clusterdataf, clustermethod = kmeans)
clusterboot(clusterdataf, clustermethod = kmeansCBI)
clusterboot(clusterdataf, clustermethod = kmeansCBI, krange = 3)
aaa = clusterboot(clusterdataf, clustermethod = kmeansCBI, krange = 3)
summary(aaa)
aaa$result
aaa$partition
aaa$bootresult
plot(aaa)
aaa$B
pvrect(s, max.only=FALSE)
for(i in results){
print("_________________________")
print(cluster.stats(distances, i))
plot(silhouette(i, distances), cex.names=0.6)
}
aaa = clusterboot(clusterdataf, clustermethod = kmeansCBI, krange = 3)
plot(aaa)
plot(clusterboot(clusterdataf, clustermethod = kmeansCBI, krange = 3))
plot(clusterboot(clusterdataf, clustermethod = kmeansCBI, krange = 3))
