{
    "collab_server" : "",
    "contents" : "library(readr)\nlibrary(Hmisc)\nlibrary(cluster)\n\n# Importazione del dataset\n\nlibrary(readxl)\nristo <- read_excel(\"D:/Box Sync/appCustomer/Analisi Risto/dati.xlsx\")\n\nsummary(risto)\n\n# Imputazione dei dati mancanti\n\nristo[, 'Coperti'] <- impute(risto$Coperti, mean)\n\nsummary(risto$Coperti)\n\n\n### Presenza di un computer  ####\n\npie(table(risto$Computer), labels = round(table(risto$Computer)/length(risto$Computer),2),  col = greenscale, main = \"Possiede Pc o Tablet\")\nlegend(\"topright\", c(\"No\", \"S?\"), fill= greenscale)\n\npie(table(risto$GestSoftware[risto$Computer == TRUE]), labels = round(table(risto$GestSoftware[risto$Computer == TRUE])/length(risto$GestSoftware[risto$Computer == TRUE]),2),  col = greenscale, main = \"Ha un software di gestione\")\nlegend(\"topright\", c(\"No\", \"S?\"), fill= greenscale)\n\nround(table(risto$GestSoftware[risto$Computer == TRUE])/length(risto$GestSoftware[risto$Computer == TRUE]),2)\n\nround(table(risto$GestSoftware)/length(risto$GestSoftware),2)\n\n\nbinom.test(table(risto$GestSoftware[risto$Computer == TRUE])[2], n = 30, p = .41)\n\nbinom.test(table(risto$GestSoftware)[2], n = 30, p = .41)\n\n\n### Servizi online di ristorazione ###\n\ncols = redscale[c(3, 4, 6)]\nwindows()\npar(mfrow = c(3, 1))\npie(table(risto$TripAdv), labels = round(table(risto$TripAdv)/length(risto$TripAdv),2),  col = cols, main = \"Trip Adivisor\")\npie(table(risto$Facebook), labels = round(table(risto$Facebook)/length(risto$Facebook),2), col = cols, main = \"Facebook Pages\")\npie(table(risto$gMaps), labels = round(table(risto$gMaps)/length(risto$gMaps),2), col = cols, main = \"Google Maps\")\nlegend(\"topright\", c(\"Assente\", \"Gestore\", \"Presente\"),fill=cols)\n\nwindows()\npie(table(risto$Sponsr), labels = round(table(risto$Sponsr)/length(risto$Sponsr),2),  col = bluescale, main = \"Ha Sposorizzato\")\nlegend(\"topright\", c(\"Mai Sponsorizzato\", \"Sponsorizzato\"), fill= bluescale)\nbinom.test(table(risto$Sponsr)[2], n = 30, p = .5)\n\n\n### Prenotazioni ###\n\npie(table(risto$Pren), labels = round(table(risto$Pren)/length(risto$Pren), 2),  col = redscale, main = \"Effettua prenotazioni\")\nlegend(\"topright\", c(\"Fa Prenotazioni\", \"Non fa Prenotazioni\"), fill= redscale)\n\ntable(risto$Pren, risto$PrenDaysWeekend)/length(risto$Pren)\n\nprenotest = binom.test(table(risto$Pren)[2], n = 30, p = .9); prenotest\n\n# nessun dato interessante su chi non fa prenotazioni\n\n# Gestione delle prenotazioni\npie(table(risto$PrenGest), labels = round(table(risto$PrenGest)/length(risto$PrenGest),2),  col = redscale, main = \"Gestione prenotazioni\")\nlegend(\"topright\", c(\"Altro\", \"Per posto\", \"Per tavolo\"), fill= redscale)\n\ntavoloprenotest = binom.test(table(risto$PrenGest)[3], n = 30, p = .733); tavoloprenotest\n\n\n#### ANALISI MENU ####\n\n# Presenza del men?\n\npie(table(risto$MenuPre), labels = round(table(risto$MenuPre)/length(risto$MenuPre),2),  col = greenscale, main = \"Presenza di un men?\")\nlegend(\"topright\", c(\"No\", \"S?\"), fill= greenscale)\n\n\ntable(risto$MenuVar[risto$MenuPre == TRUE])\ntable(risto$MenuVar[risto$MenuPre == FALSE])\n\n### CLUSTER ANALYSIS ###\n\ndistances = daisy(as.data.frame(as.matrix(risto)), metric = \"gower\")\nsummary(distances)\n\n\n\nh<-hclust(distances, method = \"ward\")\n\nplclust(h, main = \"Deindogramma dei ristoranti\") \n\nh.cl<-h$height \nh.cl2<-c(0,h.cl[-length(h.cl)])\nround(h.cl-h.cl2,3)\ncut = max(round(h.cl-h.cl2,3))\nabline(cut, 0)\n\n\n\n\npar(mfrow = c(1,4))\n\nh<-hclust(distances, method = \"single\")\n\nplclust(h, main = \"Single clustering\") \n\nh.cl<-h$height \nh.cl2<-c(0,h.cl[-length(h.cl)])\nround(h.cl-h.cl2,3)\ncut = max(round(h.cl-h.cl2,3))\nabline(cut, 0)\n\n\nh<-hclust(distances, method = \"complete\")\n\nplclust(h, main = \"Complete Clustering\") \n\nh.cl<-h$height \nh.cl2<-c(0,h.cl[-length(h.cl)])\nround(h.cl-h.cl2,3)\ncut = max(round(h.cl-h.cl2,3))\nabline(cut, 0)\n\n\nh<-hclust(distances, method = \"average\")\n\nplclust(h, main = \"Average Clustering\") \n\nh.cl<-h$height \nh.cl2<-c(0,h.cl[-length(h.cl)])\nround(h.cl-h.cl2,3)\ncut = max(round(h.cl-h.cl2,3))\nabline(cut, 0)\n\n\nh<-hclust(distances, method = \"ward\")\n\nplclust(h, main = \"Ward Clustering\") \n\nh.cl<-h$height \nh.cl2<-c(0,h.cl[-length(h.cl)])\nround(h.cl-h.cl2,3)\ncut = max(round(h.cl-h.cl2,3))\nabline(cut, 0)",
    "created" : 1493630173024.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "24043555",
    "id" : "74D51943",
    "lastKnownWriteTime" : 1492764636,
    "last_content_update" : 1492764636,
    "path" : "D:/Box Sync/appCustomer/Analisi Risto/analisi.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}